{"meta":{"title":"響喵的幻想空间~","subtitle":"Node.js / Swift / Golang / Python","description":null,"author":"NHibiki","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-08-21 22:54:33","updated":"2017-08-21 22:54:33","comments":true,"path":"content.json","permalink":"http://yoursite.com/content.json","excerpt":"","text":"{\"meta\":{\"title\":\"響き喵の響け ~\",\"subtitle\":\"ゆうの·響\",\"description\":\"響き喵の響け ~\",\"author\":\"N.Hibiki\",\"url\":\"https://nekoyu.cc\"},\"pages\":[{\"title\":\"\",\"date\":\"un33fin33\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"CSSSuperFitter/CSSSuperFitter.js\",\"permalink\":\"https://nekoyu.cc/CSSSuperFitter/CSSSuperFitter.js\",\"excerpt\":\"\",\"text\":\"((instances) => { class CSSSF { constructor(linkers, involve){ this.container = {}; this.involve = involve; this.target = [\\\"transform\\\",\\\"box-shadow\\\",\\\"animation\\\"]; this.prefix = [\\\"-webkit-\\\",\\\"-moz-\\\",\\\"-o-\\\"]; this.block = [\\\"keyframes\\\"]; //Save Options for (let i in linkers) { // List All Csses var tcss = this.fetchcss(linkers[i]); if (tcss !== null){ console.log(\\\"Get ID:'\\\" + i + \\\"', which links to CSS:'\\\" + linkers[i] + \\\"'.\\\"); var fcss = (involve) ? this.transcss(tcss) : tcss; this.container[i] = { Id : i , Address : linkers[i] , OriginCss : tcss , FinalCss : fcss } } // Check Ability and Save Csses } } init(objects) { if (objects === undefined) return; var s = []; var i = 0; if (typeof(objects) === \\\"string\\\"){ if (this.container.hasOwnProperty(objects)) s.push(objects); } else { for (i = 0; i < objects.length; i++) { if (this.container.hasOwnProperty(objects[i])) s.push(objects[i]); } } // Serialize Objects To s if( s.length === 0 ) return; // Stop when There is no object. for (i = 0; i < s.length; i++) { this.attachcss(s[i]); } } attachcss(o) { var head = document.getElementsByTagName(\\\"head\\\")[0]; var style = document.createElement(\\\"style\\\"); var rules = document.createTextNode(this.container[o].FinalCss); style.type = \\\"text/css\\\"; if (style.styleSheet){ style.styleSheet.cssText = rules.nodeValue; } else { style.appendChild(rules); } head.appendChild(style); } fetchcss(uri) { var isie = navigator.userAgent.indexOf('MSIE') > 0; var pipe = (isie) ? new ActiveXObject('Microsoft.XMLHTTP') : new XMLHttpRequest(); pipe.open('get',uri,false); pipe.send(null); if(pipe.responseText !== \\\"\\\") return pipe.responseText; else return null; } // Only for Same - domains Request transcss(tcss) { // Find @keyframes var key; var prefix = this.prefix; // @block Start var forbidden_space = []; var kcss = \\\"\\\"; var lcss = tcss; for(var b = 0; b < this.block.length; b++){ var reg = eval(\\\"/@\\\"+this.block[b]+\\\"/g\\\"); while((key = reg.exec(lcss)) !== null){ //alert(kcss); var x = key.index; x += this.block[b].length; var switcher = 1; while(lcss[x] != \\\"{\\\"){x++;} x++; while(switcher){ if (lcss[x] == \\\"{\\\")switcher++; else if (lcss[x] == \\\"}\\\")switcher--; else if (lcss[x] === undefined)return \\\"\\\"; x++; } // Find End //console.log(\\\"Find @Keyframes From \\\" + key.index + \\\" To \\\" + x); forbidden_space.push({ from: key.index, to : x }); // Ignore These Path when Do other Regs kcss += lcss.substring(key.index,x); for (var i = 0; i < prefix.length; i++){ var ncss = lcss.substring(key.index,x); ncss = ncss.replace(reg,\\\"@\\\"+prefix[i]+this.block[b]); for (var j = 0; j < this.target.length; j++) ncss = ncss.replace(eval(\\\"/\\\"+this.target[j]+\\\"/g\\\"),prefix[i] + this.target[j]); kcss += '\\\\n'+ncss; } //console.log(kcss); //tcss[key.index] = \\\"-\\\"; var hdtl = lcss.substring(0,key.index) + \\\"-\\\" + lcss.substring(key.index+1,lcss.length); lcss = hdtl; } kcss += '\\\\n'; // @block Finished } var fcss = \\\"\\\"; if (forbidden_space.length < 1){ fcss = tcss; // No @block Found } else{ fcss += tcss.substring(0,forbidden_space[0].from); for (var i = 0; i < forbidden_space.length - 1; i++){ fcss += tcss.substring(forbidden_space[i].to,forbidden_space[i+1].from); } fcss += tcss.substring(forbidden_space[forbidden_space.length - 1].to,tcss.length); } //console.log(fcss); //Filter All Non-@keyframes Job reg = \\\"\\\"; var target = this.target; for (var i = 0; i < target.length; i++){ reg = eval(\\\"/\\\"+target[i]+\\\"/g\\\"); while((key = reg.exec(fcss)) !== null){ //alert(fcss); //alert(fcss[key.index-1] + \\\"-\\\" + key.index-1); if(fcss[key.index-1] == \\\"-\\\")continue; // Skip Changed Form var x = key.index; x++; while(fcss[x] != \\\";\\\")x++; x++; // Find Keys if(fcss[x] == '-'||fcss[x+1] == '-'||fcss[x+2] == '-')continue; //Skip Changed Form var hd = fcss.substring(0,key.index); var ct = fcss.substring(key.index,x); var tl = fcss.substring(x,fcss.length); // Split Content //console.log(tl); fcss = hd; fcss += ct; for (var j = 0; j < prefix.length; j++){ fcss += '\\\\n' + ct.replace(reg,prefix[j]+target[i]); } fcss += tl; } } return (fcss+'\\\\n'+kcss); } } if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') { module.exports = CSSSF } else { window.CSSSF = CSSSF; } })([]);\"},{\"title\":\"\",\"date\":\"un33fin33\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"CSSSuperFitter/demo.css\",\"permalink\":\"https://nekoyu.cc/CSSSuperFitter/demo.css\",\"excerpt\":\"\",\"text\":\".body{ padding: 0, 0; margin: 0, 0; }\"},{\"title\":\"\",\"date\":\"un33fin33\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"CSSSuperFitter/index.html\",\"permalink\":\"https://nekoyu.cc/CSSSuperFitter/index.html\",\"excerpt\":\"\",\"text\":\"CSSSF Demo\"},{\"title\":\"\",\"date\":\"un33fin33\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"CSSSuperFitter/script.js\",\"permalink\":\"https://nekoyu.cc/CSSSuperFitter/script.js\",\"excerpt\":\"\",\"text\":\"window.onload = function() { var csssf = new CSSSF({ animate : \\\"./demo.css\\\" , origin : \\\"./style.css\\\" },1); csssf.init(new Array(\\\"animate\\\",\\\"origin\\\",\\\"new\\\")); }\"},{\"title\":\"\",\"date\":\"un33fin33\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"CSSSuperFitter/style.css\",\"permalink\":\"https://nekoyu.cc/CSSSuperFitter/style.css\",\"excerpt\":\"\",\"text\":\"div{ padding: 0, 0; margin: 0, 0; animation: t 1s 1 ease-out; transform: scale(0.3); } @keyframes t { from {transform: translateX(50%);} to {transform: translate(100%,100%);} } .div{ padding: 0, 0; animation: q 3s infinite ease-out; transform: scale(0.2); margin: 0, 0; } @keyframes q { from {transform: translateX(50%);} to {transform: translate(100%,100%);} } #div{ padding: 0, 0; margin: 0, 0; }\"},{\"title\":\"\",\"date\":\"un33fin33\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"/404.html\",\"permalink\":\"https://nekoyu.cc//404.html\",\"excerpt\":\"\",\"text\":\"Page not found - NHibiki body { background-color: #f1f1f1; margin: 0; font-family: \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif; } .container { margin: 50px auto 40px auto; width: 600px; text-align: center; } a { color: #4183c4; text-decoration: none; } a:hover { text-decoration: underline; } h1 { color: rgba(0, 0, 0, 0.3); width: 800px; position:relative; left: -100px; letter-spacing: -1px; line-height: 180px; font-size: 180px; font-weight: 100; margin: 0px 0 50px 0; text-shadow: 0 1px 0 #fff; } p { color: rgba(0, 0, 0, 0.5); margin: 20px 0; line-height: 1.6; } ul { list-style: none; margin: 25px 0; padding: 0; } li { display: table-cell; font-weight: bold; width: 1%; } .logo { display: inline-block; margin-top: 35px; } .logo-img-2x { display: none; } @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and ( min--moz-device-pixel-ratio: 2), only screen and ( -o-min-device-pixel-ratio: 2/1), only screen and ( min-device-pixel-ratio: 2), only screen and ( min-resolution: 192dpi), only screen and ( min-resolution: 2dppx) { .logo-img-1x { display: none; } .logo-img-2x { display: inline-block; } } #suggestions { margin-top: 35px; color: #ccc; } #suggestions a { color: #666666; font-weight: 200; font-size: 14px; margin: 0 10px; } 404 File not found 文件没有找到喵~ Sorry, the URLs you were reaching are not found. Please check your URLs. 对不起喵~,您请求的页面虾米内容都木有~,您是不是打错地址了呢~? N.Hibiki Blog &mdash; My @github\"},{\"title\":\"About Me ~~\",\"date\":\"un00fin00\",\"updated\":\"un33fin33\",\"comments\":true,\"path\":\"about/index.html\",\"permalink\":\"https://nekoyu.cc/about/index.html\",\"excerpt\":\"\",\"text\":\"Welcome To ShirokYu - しろ ‘s Space. &nbsp; Content 本喵，在2016年再一次入驻Wordpress大坑。 说实话，对于还有40天就要高考【可爱的江苏高考】的我来说，这也太有勇气（lang）了。 至于再入坑一说，本喵的就不加解释了，直接看接下来的“互联网记事”吧！ 2014 - 09 : 试用C9【Cloud9】（那时候C9还没有改版，还没有使用万恶的谷歌验证码，还没有被GFW桑墙）并正式从Native宅转入互联网编程猿。 2014 - 10 : 购买阿里云ECS 开始进击的PHP【PHP大法！大法！】，搭建第一个WordPress。 2015 - 01 : 开发S7SGame【Cooperated With Etasry】，发布Android人工智能版本【现已停止维护】（不是说还有Unity版本吗！Unity！Unity！–打–） 2015 - 07: 从这个暑假开始接触 html5桑 和 javascript酱。 2015 - 08 : 历经两月开发Q.FM【Html版本 + Android 本地Html化】【Android版本因服务器原因现已停止维护】【Html5版本：https://nekoyu.cc/fm】【什么？说我盗用黄易API？那叫研究！喵星人的研究能叫偷盗吗！？】 2015 - 09 : Hostker娘 萌萌哒！！ 2015 - 11 : 发布LinkerMusic 贡献200软妹币给各位痴汉们提供新浪云存储服务。【感谢你们没有刷我流量】【现还在维护，歌曲上传接口已关闭，别问我要接口！！！小窝撑不下啦！】 2015 - 12 : 强行入坑Node.js 和 Go 关闭WordPress站【药丸啊！药丸！】【反正之前也没有多少人气 哒哒哒】 2015 - 12 : 被异次元的自己拽入Vultr女仆的怀抱。【VPS大法好！】 2015 - 12 : 开坑 My1ink 一直到现在都没有填上，刚刚写好后端 呜呜呜~~~。【自己开的坑死都要填完】 2016 - 04 : 重返WordPress【不过似乎是官窝呢！】什么，为什么重返WordPress？我说这是因为没软妹币雇女仆你会信吗。。呜呜呜~~~// 不过！之前的坑还是得填的！ 本站搭建与2016/04/24\"},{\"title\":\"\",\"date\":\"un33fin33\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"about/404w.html\",\"permalink\":\"https://nekoyu.cc/about/404w.html\",\"excerpt\":\"\",\"text\":\"Page not found - NHibiki body { background-color: #f1f1f1; margin: 0; font-family: \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif; } .container { margin: 50px auto 40px auto; width: 600px; text-align: center; } a { color: #4183c4; text-decoration: none; } a:hover { text-decoration: underline; } h1 { color: rgba(0, 0, 0, 0.3); width: 800px; position:relative; left: -100px; letter-spacing: -1px; line-height: 180px; font-size: 180px; font-weight: 100; margin: 0px 0 50px 0; text-shadow: 0 1px 0 #fff; } p { color: rgba(0, 0, 0, 0.5); margin: 20px 0; line-height: 1.6; } ul { list-style: none; margin: 25px 0; padding: 0; } li { display: table-cell; font-weight: bold; width: 1%; } .logo { display: inline-block; margin-top: 35px; } .logo-img-2x { display: none; } @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and ( min--moz-device-pixel-ratio: 2), only screen and ( -o-min-device-pixel-ratio: 2/1), only screen and ( min-device-pixel-ratio: 2), only screen and ( min-resolution: 192dpi), only screen and ( min-resolution: 2dppx) { .logo-img-1x { display: none; } .logo-img-2x { display: inline-block; } } #suggestions { margin-top: 35px; color: #ccc; } #suggestions a { color: #666666; font-weight: 200; font-size: 14px; margin: 0 10px; } 404 File not found 文件没有找到喵~ Sorry, the URLs you were reaching are not found. Please check your URLs. 对不起喵~,您请求的页面虾米内容都木有~,您是不是打错地址了呢~? N.Hibiki Blog &mdash; My @github\"},{\"title\":\"categories\",\"date\":\"un66fin66\",\"updated\":\"un00fin00\",\"comments\":false,\"path\":\"categories/index.html\",\"permalink\":\"https://nekoyu.cc/categories/index.html\",\"excerpt\":\"\",\"text\":\"\"},{\"title\":\"Guys - 友链园\",\"date\":\"un11fin11\",\"updated\":\"un33fin33\",\"comments\":true,\"path\":\"guys/index.html\",\"permalink\":\"https://nekoyu.cc/guys/index.html\",\"excerpt\":\"以下是好基友萌的友链 排名不分先后： [caption id=”” align=”alignnone” width=”390”] Believe[/caption]\",\"text\":\"以下是好基友萌的友链 排名不分先后： [caption id=”” align=”alignnone” width=”390”] Believe[/caption] Etasry的冥想空间 Dimpurr 设计菊苣 学生菊苣雲水遙 &nbsp;\"},{\"title\":\"Products - 坑！坑！这里是坑！\",\"date\":\"un11fin11\",\"updated\":\"un33fin33\",\"comments\":true,\"path\":\"products/index.html\",\"permalink\":\"https://nekoyu.cc/products/index.html\",\"excerpt\":\"以下系本喵目前为止还在维护的项目： 置于为什么其他的项目不维护了？我不回答！\",\"text\":\"以下系本喵目前为止还在维护的项目： 置于为什么其他的项目不维护了？我不回答！ 1. Q.FM - Portable2. My1ink （坑还没填！！！）\"},{\"title\":\"tags\",\"date\":\"un11fin11\",\"updated\":\"un00fin00\",\"comments\":false,\"path\":\"tags/index.html\",\"permalink\":\"https://nekoyu.cc/tags/index.html\",\"excerpt\":\"\",\"text\":\"\"},{\"title\":\"\",\"date\":\"un33fin33\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"CSSSuperFitter/dist/CSSSuperFitter.min.js\",\"permalink\":\"https://nekoyu.cc/CSSSuperFitter/dist/CSSSuperFitter.min.js\",\"excerpt\":\"\",\"text\":\"eval(function(p,a,c,k,e,r){e=function(c){return(c35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\\\\\\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\\\\\\\b'+e(c)+'\\\\\\\\b','g'),k[c]);return p}('((18)=>{1H y{1o(u,D){7.B={};7.D=D;7.q=[\\\"J\\\",\\\"1p-1x\\\",\\\"1F\\\"];7.c=[\\\"-1e-\\\",\\\"-1n-\\\",\\\"-o-\\\"];h(1q i 1z u){3 5=7.15(u[i]);6(5!==t){14.12(\\\"1r 1t:\\\\'\\\"+i+\\\"\\\\', 1u 1v A 1y:\\\\'\\\"+u[i]+\\\"\\\\'.\\\");3 4=(D)?7.Y(5):5;7.B[i]={1N:i,1Q:u[i],17:5,P:4}}}}1d(e){6(e===z)l;3 s=[];3 i=0;6(G(e)===\\\"1s\\\"){s.H(e)}k{h(i=0;i\"}],\"posts\":[{\"title\":\"【Audio Stream】用 Python 建立自己的音乐流\",\"slug\":\"combine-ice-with-python\",\"date\":\"un33fin33\",\"updated\":\"un33fin33\",\"comments\":true,\"path\":\"articles/combine-ice-with-python/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/combine-ice-with-python/\",\"excerpt\":\"我发现这几天真的高产如母猪了（ TAT好的，作为昨天研究的后续，今天碰到的问题很少，但是钉子很多。\",\"text\":\"我发现这几天真的高产如母猪了（ TAT好的，作为昨天研究的后续，今天碰到的问题很少，但是钉子很多。 准备昨天全部都是按照官方文档来的，因此也没有贴 Works Cited，今天侧重于“踩坑”，就会有很多 References。 安装 python-shoutPythonShout是一个 ICE 自己的 python 库，用于方便我们用 python 代替 ICES 进行歌曲流推送。安装方式很简单。 1pip install python-shout 它的前置库在装完 ICECAST 之后都会有，因此就没多大问题了。 参考了以下的代码[1]，按照昨天的配置修改参数后，python start.py启动流推送器。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879hostname =\\\"localhost\\\"port= 8000password = \\\"??????!!!!!!\\\"import shoutimport sysimport threadingfrom glob import globfrom random import shuffle,choiceclass RunStream (threading.Thread): def __init__ (self, channel_mount, music_directory, station_url, genre,name, description, bitrate=\\\"128\\\", samplerate=\\\"44100\\\", channels=\\\"5\\\",music_format=\\\"mp3\\\", ogv=0): #connection to icecast global hostname,port,password self.song_conter= 0 self.s = shout.Shout() self.s.audio_info = &#123;shout.SHOUT_AI_BITRATE:bitrate, shout.SHOUT_AI_SAMPLERATE:samplerate, shout.SHOUT_AI_CHANNELS:channels&#125; self.s.name = name self.s.url = station_url self.s.mount = channel_mount self.s.port = port self.ogv = ogv self.s.password = password self.s.genre = genre self.music_directory = music_directory self.s.description = description self.s.host = hostname self.s.format = music_format #using mp3 but it can also be ogg vorbis print self.s.open() threading.Thread.__init__ (self) #checking directories for files to stream def scan_directories(self): self.files_array = glob(self.music_directory+\\\"/*.[mM][Pp]3\\\") + glob(self.music_directory+\\\"/*/*.[mM][Pp]3\\\") + glob(self.music_directory+\\\"/*/*/*.[mM][Pp]3\\\") #checks the specified directory down to the third depth print str(len(self.files_array))+\\\" files\\\" #display number of matching files found shuffle(self.files_array) # randomize playlist def run (self): while 1: #infinity self.scan_directories() # rescan dir, maybe in time you add some new songs self.song_counter = 0 for e in self.files_array: self.write_future() self.sendfile(e) self.song_counter = self.song_counter + 1 def format_songname(self,song): # format song name - on filename (strip \\\"mp3\\\", change _ to \\\" \\\". Formatting name of song for writing into a text file result = song.split(\\\"/\\\")[-1].split(\\\".\\\") result = \\\".\\\".join(result[:len(result)-1]).replace(\\\"_\\\",\\\" \\\").replace(\\\"-\\\",\\\" - \\\") return result def write_future(self): #write playlist filename = self.s.mount.replace(\\\"/\\\",\\\"\\\")+\\\"-current.txt\\\" fa = open(filename,\\\"w\\\") aid = self.song_counter pos = 7 # CHANGE if you want more songs in future playlist for s in self.files_array[aid:]: fa.write(self.format_songname(s)+\\\"\\\\n\\\") pos = pos - 1 if (pos==0): break if (pos&gt;0): for s in self.files_array[:pos+1]: fa.write(self.format_songname(s)+\\\"\\\\n\\\") fa.close() def sendfile(self,fa): print \\\"opening file %s\\\" % fa f = open(fa) self.s.set_metadata(&#123;'song': self.format_songname(fa)&#125;) buf = f.read(1024) while buf: self.s.send(buf) buf = f.read(1024) self.s.sync() f.close()#running the first streamRunStream(channel_mount = \\\"/nekostream\\\", music_directory = \\\"/home/neko/nekoneko/music\\\", station_url = \\\"http://nekoyu.cc\\\", genre = \\\"Neko\\\",name = \\\"NekoNya\\\", description = \\\"Nya Nya Nya\\\").start() 真的受不了原作者的奇葩缩进，真的，太他喵的奇葩了。[1] 但是， 但是，， 但是。。。 收到了一个 Segment Fault 错误，经过检查，发现是在 self.s.send(buf) 这一行出错了。推送器连接成功，但是无法发送 binary 数据。 我很习惯地打开了 Baidu，输入 python-shout Segment Fault，结果。。 结果。。。。。 python-shout 一个都没有，搜到的全是 Segmentfault 这个网站？？？ 百度迟早药丸。。。 出门右转 Google，于是看到了这篇文章[2]。 它说到 -&gt; The issue was indeed a compile problem of libshout as cox pointed out. But it only worked in debian 7 and not ubuntu 12. I think the reason why is because I did not install libogg in ubuntu I only installed vorbis which I thought was the same thing. I also installed mp3 codecs just in case. 大致意思就是，这个是官方库的问题，没有对 RedHat Linux 进行支持？EXM？ 不过也罢，python-shout最后的更新时间是 2012 年。。（在这个音乐已经小得不需要用流传输的时代，连 ICE 都抛弃了audio stream 不知道拐了几个右转弯，总算找到了一个有心人，在 GayHub 上 po 了自己修改后的代码。看了修改之后才知道，之前的问题，只是少了 PY_SSIZE_T_CLEAN 这个 define 导致C库没和Python对接上（有点怀疑 ICE 是不是解散了 逃）而且，这个 GitCommit 就没有人访问过，最后的修改时间是 2年前 [3]。 clone 下来之后安装就OK了 1python setup.py install 附带昨天写的Docker更新版本因为今天重新提交了，请更新 Docker Image 1docker pull nhibiki/nekobc 更新大小约为 768k，如果重新下载的话，和昨天的大小一样，200MB 出头（懒得压缩 TAT～） 然后，更新后的启动代码很简洁： 1docker run -d -v &#123;Your_Music_Dir&#125;:/home/ice/music -p 8010:8010 nhibiki/nekobc /start.sh 因为是 detached 启动，所以不会像昨天那样显示界面，至于想看 loading 过程的孩纸，可以自行 docker attach {ID} 查看。里面大概是这个样子的 ～ 123...[System] Start Playing /home/ice/music/鴇沢直 - BRYNHILDR IN THE DARKNESS -EJECTRO Extended-.mp3 ...[System] Sync 0.0305725362633 ... 表示了正在推送的歌曲和推送进度。 以上 Works Cited[1] http://www.it1352.com/306021.html[2] https://stackoverflow.com/questions/27654208/shout-python-segmentation-fault-how-can-i-fix-this[3] https://github.com/fergalmoran/python-shout\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"}]},{\"title\":\"【Audio Stream】使用 ICECAST 和 ICES 配合Nodejs做一个 Audio Stream\",\"slug\":\"using-ice-to-build-a-radio\",\"date\":\"un22fin22\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/using-ice-to-build-a-radio/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/using-ice-to-build-a-radio/\",\"excerpt\":\"所谓的 Audio Stream 就是一个音频流媒体服务，可以让连接到流媒体的用户听到一样的东西。 简介虽然 socket.io 已经提供了很好的流媒体方案，但是鉴于 socket.io流 本身更适用于视频或者画面流，对音频流不支持，于是就有了下面这篇文章。在 Centos 7 中，搭建一个 ICE 系列产品的生产环境。 用到的工具： yum wget tar gcc gcc-c++ make\",\"text\":\"所谓的 Audio Stream 就是一个音频流媒体服务，可以让连接到流媒体的用户听到一样的东西。 简介虽然 socket.io 已经提供了很好的流媒体方案，但是鉴于 socket.io流 本身更适用于视频或者画面流，对音频流不支持，于是就有了下面这篇文章。在 Centos 7 中，搭建一个 ICE 系列产品的生产环境。 用到的工具： yum wget tar gcc gcc-c++ make 安装方法先说在前面，如果不想安装，可以使用我已经封装好的 docker，但是因为这个 docker 并不是用于发布的，因此没有精简，所有的工具都在里面 23333，甚至于包括了 yum 的 repo缓存。完整的大小是 600 MB，docker 压缩之后是 207 MB。 安装先安装必要库文件，这些都是在默认 repo 中的，如果有强迫症，也可以自行编译。 1yum install -y libxslt-devel libogg-devel libvorbis-devel libcurl-devel libshout-devel 然后再安装我们需要用到的一些软件 首先是 ICECAST，是提供流媒体服务的服务器。 1234wget http://downloads.xiph.org/releases/icecast/icecast-2.4.3.tar.gztar zxvf icecast-2.4.3.tar.gzrm icecast-2.4.3.tar.gz -rfcd icecast-2.4.3 常规安装方法，顺便指定一下 prefix 123./configure --prefix=/usr/local/icecastmake &amp;&amp; make installcd .. 接下来是 LAME 库，一个解码 mpeg3 文件的东西，安装方法同前 1234567wget https://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gztar zxvf lame-3.99.5.tar.gzrm lame-3.99.5.tar.gz -rfcd lame-3.99.5./configure --prefix=/usr/local/lamemake &amp;&amp; make installcd .. 最后一个是 ICES，也是 ICE 系列产品，用于向 STREAM 推送文件 1234wget http://downloads.us.xiph.org/releases/ices/ices-0.4.tar.gztar zxvf ices-0.4.tar.gzrm ices-0.4.tar.gz -rfcd ices-0.4 安装 ICE 时要指定一下 lame 的目录，不然会搜不到 123./configure --prefix=/usr/local/ices --with-lame=/usr/local/lamemake &amp;&amp; make installcd .. 连接文件 12ln /usr/local/ices/bin/ices /usr/bin/icesln /usr/local/icecast/bin/icecast /usr/bin/icecast 这样，所有的依赖以及软件都装完了。 配置因为 ICECAST 的权限限制，我们尽量不要用在 chroot 用户组的用户运行 STREAM，因此，新建用户 12345groupadd nekobcuseradd nekobc -m -g nekobc -G users,wheel,audio -s /bin/bashpasswd nekobcmkdir /home/nekobcchown nekobc:nekobc /home/nekobc 下面要配置一下 ICECAST 和 ICE 的文件，创建音乐文件目录 123cp /usr/local/icecast/etc/icecast.xml ./icecast.xmlcp /usr/local/ices/etc/ices.conf.dist ./ices.xmlmkdir music 其中 icecast.xml 文件中要修改的有如下部分： 1234567891011121314151617&lt;source-password&gt;&lt;/source-password&gt; # 给 ICES 的密码&lt;relay-password&gt;&lt;/relay-password&gt; # 可以不管，建议改掉初始密码&lt;admin-user&gt;&lt;/admin-user&gt; # 网络管理用户名&lt;admin-password&gt;&lt;/admin-password&gt; # 网络管理密码&lt;logdir&gt;/home/nekobc/log&lt;/logdir&gt;&lt;listen-socket&gt; &lt;port&gt;8010&lt;/port&gt; &lt;bind-address&gt;0.0.0.0&lt;/bind-address&gt; &lt;mountpoint&gt;/stream&lt;/mountpoint&gt;&lt;/listen-socket&gt;# 启用以下配置，把注释拿掉&lt;changeowner&gt; &lt;user&gt;nekobc&lt;/user&gt; &lt;group&gt;nekobc&lt;/group&gt;&lt;/changeowner&gt; 然后是 ices.xml 文件的设置： 123456789&lt;File&gt;list.txt&lt;/File&gt; # 指定列表文件&lt;Randomize&gt;0&lt;/Randomize&gt; # 随机播放&lt;Background&gt;1&lt;/Background&gt; # 后台运行&lt;Hostname&gt;localhost&lt;/Hostname&gt;&lt;Port&gt;8010&lt;/Port&gt;&lt;Password&gt;&lt;/Password&gt;&lt;Mountpoint&gt;/stream&lt;/Mountpoint&gt;&lt;Public&gt;1&lt;/Public&gt; # 要和 ICSCAST 一致 其他的描述信息可以更具自己的需求改 最后，整理音乐列表，可以用这个命令 1find / -name \\\"*.mp3\\\" &gt; /home/nekobc/list.txt 启动服务 12icecast -b -c icecast.xmlices -c ices.xml 浏览器里面访问 http://{Your_Url}:8010/stream 就可以了。 然后是 docker直接 pull 了启动就行 懒得写前台输出占用进程，要不 QwQ 就手动 detach 吧 TAT 别打我 www 123456docker pull nhibiki/nekobcdocker run -it -v &#123;Your_Music_Dir&#125;:/home/ice/music -p 8010:8010 nhibiki/nekobc /bin/bash# Inside Dockercd /home/ice/music./start.sh# Detach Docker (Ctrl + p, Ctrl + q) 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"}]},{\"title\":\"【Slink Update】Slink for PHP 第二版更新\",\"slug\":\"slink-2-0-update\",\"date\":\"un22fin22\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/slink-2-0-update/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/slink-2-0-update/\",\"excerpt\":\"🔗 https://nyau.us -&gt; https://nya.vc 简介Slink 是什么？ - 答：是一个由 Nodejs 实现的短链系统服务。一开始由 Daocloud 托管，后来由于 Daocloud 不再面向个人开发者用户，导致无法长时间启动 Slink 服务。所以迁移至 Hostker，语言也由 Nodejs 改写更换为 PHP。数据系统由 MongoDB 转为 MySQL。 从那次大更新开始，Slink 就有两个版本。现在将慢慢实现。 PHP 版本，版本号为 2.xxA。主要承接 Slink 的短链 302 跳转服务。 Nodejs 版本，即将以 2.xxB 的方式上线，是一个泛用式Reverse Proxy系统。具体的会在专门的文章中说明。 至于这样的问题：直接全用 Nodejs 不好吗？偏要用 PHP，搞得这玩意儿不伦不类。我的解释是，对于我个人而言，302 跳转稳定性为主，RP 拓展性为主。因此用不同的语言重写。其余的，如果实在想用 Nodejs 的短链，请自行到相同 Repo 下切换 Tree 至老版本，这里就不赘述了。\",\"text\":\"🔗 https://nyau.us -&gt; https://nya.vc 简介Slink 是什么？ - 答：是一个由 Nodejs 实现的短链系统服务。一开始由 Daocloud 托管，后来由于 Daocloud 不再面向个人开发者用户，导致无法长时间启动 Slink 服务。所以迁移至 Hostker，语言也由 Nodejs 改写更换为 PHP。数据系统由 MongoDB 转为 MySQL。 从那次大更新开始，Slink 就有两个版本。现在将慢慢实现。 PHP 版本，版本号为 2.xxA。主要承接 Slink 的短链 302 跳转服务。 Nodejs 版本，即将以 2.xxB 的方式上线，是一个泛用式Reverse Proxy系统。具体的会在专门的文章中说明。 至于这样的问题：直接全用 Nodejs 不好吗？偏要用 PHP，搞得这玩意儿不伦不类。我的解释是，对于我个人而言，302 跳转稳定性为主，RP 拓展性为主。因此用不同的语言重写。其余的，如果实在想用 Nodejs 的短链，请自行到相同 Repo 下切换 Tree 至老版本，这里就不赘述了。 更新简介这次的更新主要是把原来零散的代码整合起来。 Gayhub 还没有 Po，所以不用找了，等 B 版本同步出来的时候，我再一起 Po。 本次实现的一些拓展功能虽然没什么特别大的作用，但是总算可以把 Slink 作为协助开发工具了。 新版的 Slink for PHP 支持直接跳转至结果页面。 123POST/GET https://nya.vcDATA url: https://nekoyu.cc task: set 这样就可以直接跳转到结果页面，其中，传入两个数据，一个是url，表示源网页，另一个是task，表示是跳转设置任务。 另一种API形式123POST/GET https://nya.vcDATA url: https://nekoyu.cc (callback: ?) 如果不存在 task 这一项，就是默认 API 格式，此时，会返回一个 JSON。 如果不传入callback，结果大概是这样的： 1234567&#123; \\\"status\\\":1, \\\"url\\\":\\\"https:\\\\/\\\\/nekoyu.cc\\\", \\\"msg\\\":\\\"Success!\\\", \\\"skey\\\":\\\"XrEJ\\\", \\\"slink\\\":\\\"https:\\\\/\\\\/nya.vc\\\\/XrEJ\\\"&#125; 其中，五个参数分别表示了，bool/int状态，源网址，转换信息，短链key，完整的短链。 如果传入callback，返回的信息就会被打包成一个 jsonp 格式，用于 cross domain 调用。 如 123POST/GET https://nya.vcDATA url: https://nekoyu.cc callback: jsonp_callback_nejkfow83 返回 1jsonp_callback_nejkfow83(&#123;\\\"status\\\":1,\\\"url\\\":\\\"https:\\\\/\\\\/nekoyu.cc\\\",\\\"msg\\\":\\\"Success!\\\",\\\"skey\\\":\\\"XrEJ\\\",\\\"slink\\\":\\\"https:\\\\/\\\\/nya.vc\\\\/XrEJ\\\"&#125;) 更新日志v2.01A 加入API功能 精简调用逻辑 支持直接跳转至结果页面 Class化项目 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"}]},{\"title\":\"【CP20】漫展+线下面基会（还有除草\",\"slug\":\"2017new\",\"date\":\"un22fin22\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/2017new/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/2017new/\",\"excerpt\":\"2017.07.25 修了一些错别字 - - Hello · 2017好像这是我今年第一篇博文（人懒了没有办法咩 TAT 关于这事儿，我其实是想解（jiao）释（bian）一下的。这学期我们EAP课程全程处于爆炸状态，我又选了一节不能划水的Interaction Lab和全课堂只有我一个大一新生的Computer Networking…前两个月的时候都害怕自己会不会营养跟不上（2333 这些都是玩笑话啦，至于为什么没有写Blog，其实和我这学期做的Project有关。\",\"text\":\"2017.07.25 修了一些错别字 - - Hello · 2017好像这是我今年第一篇博文（人懒了没有办法咩 TAT 关于这事儿，我其实是想解（jiao）释（bian）一下的。这学期我们EAP课程全程处于爆炸状态，我又选了一节不能划水的Interaction Lab和全课堂只有我一个大一新生的Computer Networking…前两个月的时候都害怕自己会不会营养跟不上（2333 这些都是玩笑话啦，至于为什么没有写Blog，其实和我这学期做的Project有关。 这学期的几个大project因为某些原因不能写在自己的Blog里面（只能列举一下 - PipeSocks的官方主页（虽然作者好像已经退坑并且跑路了 GravityMaze（基于三轴重力感应的迷宫游戏，因为写在学校的Blog中了，就不搬运了。有兴趣的可以来这儿。 为一家学生开的线上餐饮公司写了后端（开发过程很气，为了强行使用第三方平台，强行要求我把爬虫==后端（？？爬虫？？？？Exm？？？那个辣鸡第三方平台还没有API？？？ 接了几单编曲和扒谱的活儿（好的，以后不接了（好累TAT，还是自己写写好，至少没有DDL 好了，解释一堆结束了（下面就讲讲CP20吧 CP20因为听说是10点钟入场，于是就很Naive地9点钟出发（6号线到世纪大道，转2号线到龙阳路，最后7号线到花木路。 离CP20会展中心还有4站路，就完全可以感受到死宅的氛围（ 半年前，萤火虫漫展时，我到龙阳路才看到第一个cos小姐姐，而这次，在世纪大道就能看到一大把。在2号线，7号线站台更是有一万个小姐姐在化妆（ 而这样的氛围也给了我不好的预感 – 大概人会超级多。 总之，作为一个路痴，我也有路痴的觉悟。一路跟着cosplayer走就好啦（是不是很机智！ 一路上，除了小姐姐，还看到了大佬们的统车（ 绕过一个弯，浮现眼前的就是。。。人。。。人。。。人。。。 4/30那天，气温要28度，又有太阳，挤在人群中都要化掉了。（尤其是看到那些已经换好妆的cosplayers。真的，很心疼。主办方也是，少超售那么一两百张门票会死嘛！！！（场馆排大一点会死嘛！！！（算了不去计较了 排了一个小时不到一点，总算进入了室内分流区。嗯，至少不用晒太阳了（ 第一个场馆是企业馆（CP：不管怎么样你总是要先拜拜企业爸爸是吧！ 来的企业有阴阳师，舰R，少女咖啡，Bilibili，角川… 当然，还有邪教Lovelive和FF XIV，只不过这两个被安排到了活动馆（不论过了多少个月，只要有人放起 μ’s 的歌，一定会有一群小姐姐（外加几个奇怪的蜀黍）排好队列开始跳（然后就会有一大群人围上去打Call（就算是我这种已经完全退坑的人有的时候都忍不住想哭（不啦，就是那种想哭的感觉啦（很难形容 TAT 活捉一只果果（ 活动馆还有一个可以观摩的地方就是Lolita区（ 这里的Lo装真的好看（嗯嗯，不是那种奇怪的想法哦，Lo装确实太华丽了（ 从这里开始，就有很多漂亮的小姐姐开始约片了（比如这一只岛风 再往里就是最后一个场馆 - 同人区，也就是CP的主馆 凭感觉而言，这里的人大概是前面两个场馆人数加起来的两倍（摊位很密集，从A01一直到Q37，几百来个摊位，各自骗钱都有自己精美的作品。 有很多画的很好的同人本，也有很多优秀的精曲集，也有几家Galgame社团在推销自己的游戏。 超棒！ 在同人区还面基了好多好多菊苣（ 可爱又娇羞的南音，Biu群的稻叶，微博上认识的Makito（大菊苣QAQ 之后还有Lingoys的各位（9更喵【好高好高】，布丁（布丁超萌Q，还有特意赶来上海的千岁（ （不过在这里要和大家道歉啦（因为要和保镖同学Sana通行，没有办法和大佬们一起浪 QAQ，就只能先见一面以后再说啦（ 另外，用自己的照片换到了萌萌的小新的女装照（好吧我瞎说的. 好期待7月份的面基大会（ 差不多4点的时候，我和同学离场回学校，偷偷抓住了一只萤草～ 总结这次CP20真的玩得好累（ 还证实了一件事（ 大叔们果然只看腿不看脸 （还有好几个怪蜀黍跑过来和我说（少年好腿 》_《 ？？早知道就不穿的那么露了（ 还会被晒黑（ 气 然后这次居然没有氪多少金（大概是因为我已经没有信仰了吧（ 好啦，就写到这儿，也算把后花园的草都除了一遍 对于那些是不是翻我Blog的孩纸们：建议还是订阅RSS吧（现在越来越忙了，基本没时间写博客了，估计就算更新也是一季度一更，或者半年一更。【天哪！下学期我还要Overload TAT… 总之， 祝大家身体健康，再见 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"}]},{\"title\":\"【Biu】跨平台的BiuFM播放器\",\"slug\":\"bqplayer\",\"date\":\"un44fin44\",\"updated\":\"un44fin44\",\"comments\":true,\"path\":\"articles/bqplayer/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/bqplayer/\",\"excerpt\":\"半年前（6个月吧？8个月吧？忘记了 TAT。我答应小新写一个Android客户端For Biu。//不巧的是我正巧在那个时候手机坏了，换了个iPhone，Android SDK又因为很奇葩的原因一直挂（后来才知道是没给Java虚拟机开足够的内存。总之（这件事情一直都没有达成 后来嘛，用Nodejs写了一个QPlayer（博客以前的文章有提到，目前最新的版本支持网易，QQ，虾米三大音乐供应商的歌单。之后自然就想到了小新的Biu。\",\"text\":\"半年前（6个月吧？8个月吧？忘记了 TAT。我答应小新写一个Android客户端For Biu。//不巧的是我正巧在那个时候手机坏了，换了个iPhone，Android SDK又因为很奇葩的原因一直挂（后来才知道是没给Java虚拟机开足够的内存。总之（这件事情一直都没有达成 后来嘛，用Nodejs写了一个QPlayer（博客以前的文章有提到，目前最新的版本支持网易，QQ，虾米三大音乐供应商的歌单。之后自然就想到了小新的Biu。 下载地址 好啦！&gt;_&lt; 窝不是去偷歌的（只是希望把更多的音乐平台加进来 当我读API读到一半时，却被告知，因为Biu受攻击，所有服务都必须要登陆以后才能使用（噫 而QPlayer的宗旨是不登陆听歌，在QPlayer注册的User信息是没有密码并且完全公开的（ 我总不能写一个插件去突破我自己曾经规定的Framework吧！（泥奏凯，泥只是懒得写鉴权 本来窝想 “算了吧，就跳过Biu吧。”可是，窝一再不填坑，总是感觉有点对不起可爱的小新。三思过后，就决定用原来的UI，把后台的代码重写一遍（ 小动作原先，本来只是想偷个懒0.0，把现成的Biufm平台“借用”一下，这样窝就不用写随机选歌的算法了（没想到，这一curl，curl出了“洞” （Biu Biu还是一个很好的平台啦！我就不贴代码了（哼，小新的权益我来保护【泥够了 总之，简单的说，窝发现，其实如果不用官方API获取音乐和播放列表的话，可以绕过鉴权（逃 至于如何实现的，就像我上面说的，有能力的人自己找吧！（只要BQPlayer还能放歌，这个方法就还在～（逃 （也因为这样，窝会对这次发布的BQPlayer的后台部分进行加密【毕竟Electron-Packager不保护源码嘛 当然，最后是要吐槽一下（被无限次MJJ，很难受 QAQ 截图因为窝现在只用 GNU/Linux 和 Macintosh，就只用 Mac 下的截图了（其他的除了屏幕不一样以外都一样～ （包括那三只 Traffic Lights 【喵～ 具体操作方法快捷键和鼠标食用方法，参考QPlayer 下载地址https://nyau.us/BQPlayer 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"biu\",\"slug\":\"biu\",\"permalink\":\"https://nekoyu.cc/tags/biu/\"},{\"name\":\"nodejs\",\"slug\":\"nodejs\",\"permalink\":\"https://nekoyu.cc/tags/nodejs/\"},{\"name\":\"linux\",\"slug\":\"linux\",\"permalink\":\"https://nekoyu.cc/tags/linux/\"}]},{\"title\":\"【Gentoo】給Aliyun的Gentoo升级\",\"slug\":\"update-aliyun-gentoo\",\"date\":\"un33fin33\",\"updated\":\"un33fin33\",\"comments\":true,\"path\":\"articles/update-aliyun-gentoo/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/update-aliyun-gentoo/\",\"excerpt\":\"已经下定决心要好好玩玩Linux了。虽然我并没有勇气格电脑装Linux（对于习惯Mac的人来说似乎不太舍得这么做）。我想尽量装个双系统，或者在Cloud Platform上装一个深坑一点的Linux系统。比如ArchLinux 和 Gentoo。 于是我就选择了Aliyun的Gentoo系统，打算先玩玩练练手。（毕竟现在Aliyun坑得只能用来研究了…除了性能，各种不如腾讯云【当然说不定只是一时的】） 但是最近准备給Aliyun按Docker和BBR的时候，突然发现按不上去。检查以后才知道是内核与系统版本太低（2014年的版本！！？）于是，虽然对内核与Linux运作机制遠不了解，但也只能硬着头皮上了。\",\"text\":\"已经下定决心要好好玩玩Linux了。虽然我并没有勇气格电脑装Linux（对于习惯Mac的人来说似乎不太舍得这么做）。我想尽量装个双系统，或者在Cloud Platform上装一个深坑一点的Linux系统。比如ArchLinux 和 Gentoo。 于是我就选择了Aliyun的Gentoo系统，打算先玩玩练练手。（毕竟现在Aliyun坑得只能用来研究了…除了性能，各种不如腾讯云【当然说不定只是一时的】） 但是最近准备給Aliyun按Docker和BBR的时候，突然发现按不上去。检查以后才知道是内核与系统版本太低（2014年的版本！！？）于是，虽然对内核与Linux运作机制遠不了解，但也只能硬着头皮上了。 首先，我还是得感谢一下Aliyun。虽然它坑，但似乎它对自己的运算性能非常有把握.. 一是，第一次看到能在VPS上运行高运算量的Gentoo（毕竟用它的包管理器最常见的就是下载编译）很多服务商都不太敢引入Gentoo。二是，它居然没给系统升级到较新..TAT..这明摆着是想让我们自己升级，无疑又要消耗很多计算资源【噫 尝试为了升级Gentoo.. 失败了很多次.. 很多坑都是出在内核升级上 毕竟我们要将内核从3.12 -&gt; 4.4跨度很恐怖（当然，之后为了开启BBR，我又将它升级到了 4.9.3） 我按照官方Wiki一步一步来： 先 emerge --sync 更新包管理源 然后 emerge -avq genkernel 下载内核更新工具（用于initramfs更新） 再 emerge -avq gentoo-sources 下载内核源码 如果想直接越过稳定版本跳至 ~arch 下最新的版本，可以手动fetch内核源码并解压到 /usr/src 目录中 4.4阿里云镜像地址：http://mirrors.aliyun.com/gentoo/distfiles/linux-4.4.tar.xz 4.9阿里云镜像地址：http://mirrors.aliyun.com/gentoo/distfiles/linux-4.9.tar.xz 然后就可以配置内核了 我按照以前的一点点非常单薄的知识，执行以下代码： 12345make -j4 oldconfig \\\\ make -j4 \\\\ make install \\\\ make modules_install \\\\ genkernel initramfs oldconfig中，如果有想加入的新功能就自行钩上，比如如果想开启Docker功能，可以按照Neil的方法，把相关功能开启。传送们 其他不变就一路回车。 最后，阿里云用户请修改grub（阿里云的grub很让人抓狂.. 全部不启用ln软连接，升级起来很麻烦，这时候只要手动把kernel和initramfs的对应项改成ln软连接就行了 123linux /boot/vmlinuz root=UUID=xxxxxxxx(你自己的Disk UUID) ro single echo 'Loading initial ramdisk ...'initrd /boot/initramfs PS：一共三处 这样每次升级只需要 ln -s /boot/xxx-?.?.?-gentoo /boot/xxx 就好了，不用再次更改grub，非常方便 接下来，reboot 失败然后，很奇怪的事情发生了，ssh怎么都连不上去。 好在Aliyun提供pin接口，可以用net console直接链接。 检查防火墙，检查sshd，统统没有问题。 偶然一次，打算 emerge 的时候，发现了错误 – 没有连上网 整个服务器都是掉线状态。 尝试了 /etc/init.d/net.eth0 之后，找到问题：没有相关驱动，也就是说，还是内核的问题 成功就这么把这个问题放了一天，后来在和Neil TG的时候，Neil推荐我尝试不要用oldconfig来fetch存在的信息，而是直接用localmodconfig，虽然这个经常用来精简系统233，但是它的功能正是我想要的（它会自动检测当前系统加载的modules并且精简或增加.config的选项配置 然后再次编译，reboot，成功。 接下来只要更新python, portage然后直接更新整个系统树就好了。 至于到底是什么驱动使得我们的VPS无法连接到网络，我就不打算一一对着看了（就是偷懒嘛。 于是就把两份.config先后传到git上，用git来检测一下哪里的config出了问题（ 以上。\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"linux\",\"slug\":\"linux\",\"permalink\":\"https://nekoyu.cc/tags/linux/\"},{\"name\":\"gentoo\",\"slug\":\"gentoo\",\"permalink\":\"https://nekoyu.cc/tags/gentoo/\"}]},{\"title\":\"【杂记】腾讯学生机注册脚本\",\"slug\":\"fvcktc\",\"date\":\"un11fin11\",\"updated\":\"un11fin11\",\"comments\":true,\"path\":\"articles/fvcktc/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/fvcktc/\",\"excerpt\":\"前景摘要：2016年12月开始，马总把学生优惠取消了，唯有已经购买学生机的学生可以通过疯狂签到获取9.9元每月的续费权利。因为響喵非常需要一台国内的机器做中转和核心服务器（用来监控和同步其他服务器。所以并不想把这个机会放弃掉// 虽然，国内除了阿里云之外，还有腾讯云有学生优惠。但因为響喵一直拒绝注册学信网，导致腾讯死活不给我通过学生认证。最近通过特殊的Py方式，成功获得了学生认证。当然，也就可以凭借这个认证去抢“1元VPS”和“CN域名”了。 但当我Google企鹅学生点读机的时候，发现有一亿人在抱怨200名额一天太抠门，机会太难抢了。鉴于響喵平时不完游戏，而且非常洁身自好，手速并不快TAT，于是我就一直在想怎么抢这个优惠（ 看某蛤乎上有童鞋吐槽，抢了几个世纪都没抢到企鹅学生点读机，为此居然去淘宝花16RMB购买代抢服务，我真的被深深震惊了。于是，决意写一个js脚本试试运气。\",\"text\":\"前景摘要：2016年12月开始，马总把学生优惠取消了，唯有已经购买学生机的学生可以通过疯狂签到获取9.9元每月的续费权利。因为響喵非常需要一台国内的机器做中转和核心服务器（用来监控和同步其他服务器。所以并不想把这个机会放弃掉// 虽然，国内除了阿里云之外，还有腾讯云有学生优惠。但因为響喵一直拒绝注册学信网，导致腾讯死活不给我通过学生认证。最近通过特殊的Py方式，成功获得了学生认证。当然，也就可以凭借这个认证去抢“1元VPS”和“CN域名”了。 但当我Google企鹅学生点读机的时候，发现有一亿人在抱怨200名额一天太抠门，机会太难抢了。鉴于響喵平时不完游戏，而且非常洁身自好，手速并不快TAT，于是我就一直在想怎么抢这个优惠（ 看某蛤乎上有童鞋吐槽，抢了几个世纪都没抢到企鹅学生点读机，为此居然去淘宝花16RMB购买代抢服务，我真的被深深震惊了。于是，决意写一个js脚本试试运气。 FvckTC首先，来到页面，Option+Command+I调出Inspect，发现抢主机不过是一个JQuery Post，连refresh都不加【这分明就是引诱我犯罪233 手写脚本在console直接执行.. 123456789101112131415161718// Get Tencent Student Redeemvar getThread = null;var timeInterval = 20;var getCount = 0;if (!getThread) &#123; getThread = setInterval(() =&gt; &#123; if ($(\\\"button[hotrep='qcact.campus.getVoucherBtn']\\\")[0].disabled) &#123; $(\\\"button[hotrep='qcact.campus.getVoucherBtn']\\\").attr(\\\"disabled\\\",false); &#125; $(\\\"button[hotrep='qcact.campus.getVoucherBtn']\\\").click(); if ($(\\\".J-close\\\")) &#123; $(\\\".J-close\\\").click(); &#125; console.log(\\\"Already Tried: \\\" + (++getCount) + \\\" Times.\\\"); &#125;, timeInterval);&#125; 脚本下载：https://yuuno.me/Linker/FuckTC.js 镜像：https://nekoyu.cc/Linker/FuckTC.js 校准Mac时间，在11:59:30左右refresh一下页面，执行脚本【如果这个脚本使您的浏览器炸了，请把timeInterval调大】，一发入魂，直接获得代金券。（由此，明天我去试试抢la域名，虽然我对中国的域名代理商并不感兴趣，但似乎TC愿意非常诚恳地提供转移码，那我就也不去太计较了。【设置自建的防垃圾邮箱，阿里一次性小号，匿名信息就好（ 后续入账的是一个64元代金券和25元代金券，分别可以在服务区和域名上使用。 TC非常不厚道TAT，虽然阿里云取消了学生优惠，但允许我们把带宽向上调整，只要是按量计费即可【每月还提供10元流量券】。然而TC的代金券是一次性的，换句话说，如果选择了按量计费，那就得自己支付流量费用，这对于我这种中转服务来说是大灾难。于是，我就只能把它当试验机，连到docker服务上做一个静态分发。 至于这25元的“CN域名”代金券，傻子才回去注册CN域名 233（逃 我直接买了ME域名，同样也是25一年（当然续费就挺可怕了【发现代金券并没有限制一级域名类型 QwQ 哈哈 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"javascript\",\"slug\":\"javascript\",\"permalink\":\"https://nekoyu.cc/tags/javascript/\"}]},{\"title\":\"【日常】上海大学生创客·NFC Cardshelf\",\"slug\":\"creator2016\",\"date\":\"un22fin22\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/creator2016/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/creator2016/\",\"excerpt\":\"这篇文章拖这么晚真是不好意思呢（因为一放假就到处去玩就忘记更了啦！现在时间足够就把它填了吧【 这个创客（首先先吐槽一下 是一个，由同济大学举办的面子工程类的创新科技比赛 - 应该不能算是创客。 这是很气的，因为这次根本没有所谓的“题目”，有很多高年级学生拿着自己已经研究了两三年的项目来参加这个所谓“及时创新”的比赛。累计2天的创客马拉松，甚至连2小时都没呆满，只是露个脸拿个奖（和某某机构差不多的气氛）。那我们只能给他们让位了 QAQ\",\"text\":\"这篇文章拖这么晚真是不好意思呢（因为一放假就到处去玩就忘记更了啦！现在时间足够就把它填了吧【 这个创客（首先先吐槽一下 是一个，由同济大学举办的面子工程类的创新科技比赛 - 应该不能算是创客。 这是很气的，因为这次根本没有所谓的“题目”，有很多高年级学生拿着自己已经研究了两三年的项目来参加这个所谓“及时创新”的比赛。累计2天的创客马拉松，甚至连2小时都没呆满，只是露个脸拿个奖（和某某机构差不多的气氛）。那我们只能给他们让位了 QAQ #Plan我们预计完成的是一个小型NFC IC Reader 和 Writer. 工具是：Arduino（噫 以后再也不想用Arduino了（原因我会写在后面 TAT；NFC Shield；RGB LED；Buttons；Lines；Board。 基本思路是：用启动命令控制线圈和IC卡交互激活，然后认证，获取信息。 至于认证，就要和各大IC卡提供商py一下了【雾！毕竟现在市面上的IC卡认证都是加过密的 FF FF FF FF FF FF 的已经看不到了 TAT #Time Line2016-12-17预演（预演？然而（并没有什么用。 所有人展示一下PPT，介绍一下自己的项目。 2016-12-24 - 2016-12-25开幕式 + 借器材时间在接下来的24小时里，主办方教会我们一个道理（千万不要用主办方提供的器材 其实，当我发现，借器材列表中，40条有28条都是我们组的时候就应该意识到这点… 我们曾经在参赛前幻想过（哇！主办方回复邮件说，为了鼓励大家现场制作，提供所有器材，包括Arduino Leonardo/UNO/Mega，NFC Shield等等。 然而，到了现场才知道，那个“Arduino UNO”是国产山寨的JBduino UNO（！？！？）。あのさ【翻译：我说】，你用DFRobot的我也就睁一只眼闭一只眼了，买个JBduino（！？！？）听都没听说过，Mac下压根就不识别。幸亏我儿子（Eric）用的是Surface Book（各种山寨实验证明Windows贼强2333），识别的这个奇葩的机器。 接下来是NFC Shield的事情。。还是这个问题 – 山寨。用I2C通讯就炸，后来发现原因是它有几个pin脚坏掉了（！！！？ 不过，在发现之前，我们也尝试过用山寨Leonardo用Serial2通信解决了上面的问题。但，遗憾的是，贪玩的我们把这块救命稻草玩坏了（喂喂喂！谁叫这个山寨货居然不抗短路 x。于是只能回到UNO上面来。 然后我们开始了漫长的研究… 比赛在第二天中午，我最终找到了解决方法。 鉴于UNO虚拟Serial不支持9600以上的频率，不使用I2C，把协议改成ASPI就行了（终于，我们没有玩坏这块板子 【并不知道为什么之前没有想到这一点 摔 整个实现方式很简单，直接贴Github Merge要求表：Project Link 因为是Private，不在NYU开发者组中的就不要点这个链接了。 3个class 12345678910111213141516171819202122/* NFC::Class */Card readCard();bool showCard(Card card);/* Card::Class */Card(Card card);Card(char c);Card();char getId();void saveId(Card card);char getInfo();void saveInfo(Card card);char toString(); // Turn Self To Stringvoid clone(Card card);/* Storage::Class */Card* getCards();bool saveCard(Card card); 就是这样。 然后，遇到了一个，导致我再也不想用Arduino的问题… Merge完之后，Download，机器开始无穷尽的重启（因为我们意外的发现 Start 函数中的命令居然被反复地执行者，而且Serial缓冲区出现异常。 后来，看了编译提示（Compiled Static Memory Used：88%）之后，才恍然明白，内存炸了。。。 UNO板的内存是2KB，我却在程序里面开了一个 长度为10 的 Card类数组。【 哭 由于都是必要信息无法压缩，如果没扫描一次都读取 Storage 又得改变程序结构（而当我们发现这个问题的时候距离比赛结束只剩下2小时了。我们不打算冒这个险，于是就只能减少数据量了 10 -&gt; 6。 2016-12-26评比 + 媒体参观 + 颁奖这个评比就不说了，提问环节的时候，居然有人问我们（IC卡里面是不是也有一块锂电池！！？ #Critic整个比赛，从硬件待遇（除去山寨产品）上说，我还是很享受的。毕竟伙食很好（还有圣诞派对 但是从流程上以及规划上来说，就是糟透了。 评审团平均素质不高（大多数对科技一窍不通，只是行政人员）；器材不规范；限制不严格【报名的时候说禁止携带完成品，然而最后一二等奖全是完成品】 一言概之，就像我开头说的，非常表面化，没有实质的“创客”，只是展现了“我们办过创客”这个事实。 总之，作为一次体验，还是挺有收获的（毕竟从此以后，再也不想碰2KB内存的机器了【看！人家RBPI 3B都已经 1GB了 TAT 另外！各位新年快乐！！！ 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"},{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Arduino\",\"slug\":\"Arduino\",\"permalink\":\"https://nekoyu.cc/tags/Arduino/\"},{\"name\":\"C\",\"slug\":\"C\",\"permalink\":\"https://nekoyu.cc/tags/C/\"}]},{\"title\":\"【QPlayer】食用手册 - Manual\",\"slug\":\"qplayer-manual\",\"date\":\"un44fin44\",\"updated\":\"un55fin55\",\"comments\":true,\"path\":\"articles/qplayer-manual/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/qplayer-manual/\",\"excerpt\":\"if (location.href.indexOf('?') != -1) { var alaunch = 'For English Version'; document.getElementById(\\\"englishversion\\\").innerHTML = alaunch; } else { var alaunch = 'For English Version'; document.getElementById(\\\"englishversion\\\").innerHTML = alaunch; } 最近更新：V2.0.1 Latest Update: V2.0.1 关于 QPlayer (About QPlayer)QPlayer 是用 Node.js + Electron 写的一个便携式音乐电台 QPlayer is a portable Music FM drived by Node.js And Electron. (Musics From NetEase.) 写的初衷主要是因为窝怕麻烦（音乐播放器什么的要点好多好多下才能做成这样的播放样式（特别麻烦 The Reason WHY I made it is simply for the troublesome when using other music player. (It took me so much time to figure out bunch of settings when starting up LOL.) 最新版的下载请至：QPlayer 因为使用 Google网盘，所以请不能越墙的用户稍等 QwQ Download The Latest Version: QPlayer\",\"text\":\"if (location.href.indexOf('?') != -1) { var alaunch = 'For English Version'; document.getElementById(\\\"englishversion\\\").innerHTML = alaunch; } else { var alaunch = 'For English Version'; document.getElementById(\\\"englishversion\\\").innerHTML = alaunch; } 最近更新：V2.0.1 Latest Update: V2.0.1 关于 QPlayer (About QPlayer)QPlayer 是用 Node.js + Electron 写的一个便携式音乐电台 QPlayer is a portable Music FM drived by Node.js And Electron. (Musics From NetEase.) 写的初衷主要是因为窝怕麻烦（音乐播放器什么的要点好多好多下才能做成这样的播放样式（特别麻烦 The Reason WHY I made it is simply for the troublesome when using other music player. (It took me so much time to figure out bunch of settings when starting up LOL.) 最新版的下载请至：QPlayer 因为使用 Google网盘，所以请不能越墙的用户稍等 QwQ Download The Latest Version: QPlayer 食用手册因为第一版暂时只支持网易，所以请一定要有一个网易账号哦（或者，你可以听别人的歌单，这样就可以避免注册，如果你想听所有人的音乐，请手动把 ShortID 调成 IFM） 关于基本操作：你可以在控制界面点击除按钮以外的任何地方进入纯专辑图片模式（返回方式相同） 或者，你也可以按 ; 键进行切换【全局的键盘为 Shift + Alt + ;】 同样，你可以点击控制界面右上角的绿色按钮进入设置界面（返回方式相同） 或者，你也可以按 &#39; 键进行切换【全局的键盘为 Shift + Alt + ‘】 通过按 Enter Space \\\\，可以快速 切歌，暂停/继续，设置单曲循环。 或者，你也可以通过全局的键盘 - Shift + Alt + 相应的局部键盘进行控制 你可以通过 [ ] 或者鼠标滚轮调整音量【全局键盘为 Shift + Alt + 相应的局部键盘 】 当然，如果你是2维鼠标滚轮（比如 Magic Mouse）你可以通过左右滑动鼠标滚轮进行 暂停/继续 和 切歌 的操作 从V1.5.*开始，播放器支持隐藏按钮，你可以通过按 Dock 的图标或者【 Shift + Alt + l 】显示界面 从V2.*开始，通过点击最右边的绿色按钮可以进入迷你播放模式，右击迷你播放器可以返回正常模式。 如果你想知道怎么添加音乐，可以在设置界面按 / 或者 在任何时候按全局设置键 Shift + Alt + / 调出帮助。 关于如何添加音乐 Update From V1.5首先先点击 “点我添加歌曲 （xxxx）” xxxx代表你的ShortID 从V1.5开始，为了匹配各大音乐网站，ID输入变为URL（网址）输入，只要你把URL（网址）拷贝进来就好啦～ 那么，怎么获取URL呢？我们以网易为例 点我 进入自己（或者其他人）的主页： 随意点击一个歌单（ 这里以 NHibiki喜欢的音乐为例 ～ 现在看地址栏：可以看到 http://music.163.com/#/playlist?id=91881742 那么，直接将它拷贝到URL框就好啦 同理，如果是歌曲，例如 前前前世 (movie ver.) 打开歌曲页面后 可以看到地址栏： http://music.163.com/#/song?id=426881487 拷贝进去可以直接添加歌曲 这样，我们就添加了两项啦～ 另外，如果要删除，只需要点击一下，确定，就好了～ if (location.href.indexOf('?') != -1) { var buttoncn = '进入添加页面'; document.getElementById(\\\"enteraddcn\\\").innerHTML = buttoncn; } 如果有什么问题还需要我的帮助，可以直接在下面留言（ 如果因为Disqus被墙而无法留言，请通过博客中的联系方式联系我 ～ UserManualThe first version only support NetEase Music and List, so PLEASE own a netease account (However, if you just wanna listen to others’ playlists, you can avoid regesting NetEase. Furthermore, you can try musics of others if you set your ShortID as IFM) About The ShortCuts：You can enter the “Cover Mod” when click anywhere (excluding buttons) in the control panel. (It is the same if you wanna come back to control panel.) Alternatively, you can press key ; inside the program to do the previous work. 【 Or Shift + Alt + ; outside of the program 】 Similarly, You can enter the “Setting Panel” when click the green button in the right-top of the control panel. (It is the same if you wanna come back to control panel.) Alternatively, you can press key &#39; inside the program to do the previous work. 【 Or Shift + Alt + ‘ outside of the program 】 To SwitchSong, Pause/Continue, Loop, you can press Enter, Space, \\\\. Or, outside the program, you can also use Shift + Alt + The key that inside the program. To Turn UP or DOWN the Volume, you can press [ or ], OR Shift + Alt + [ or ] outside the program. Furthermore, you can use the mouse wheel to control the volume. If you use a 2-Dimension Mouse (like Magic Mouse）,then you kan roll left or right to control the Pause/Continue or Switch inside the program. From Version 1.5.*, QPlayer allows users to hide the player while playing. When hiding the player, you can press the icon in Dock (Mac OS), Or, press 【 Shift + Alt + l 】 to show the player. From Version 2.*, you can enter the mini-mode by pressing the rightest green button on the top-left. You need to right click the mini-player to come back to the normal mode. To call up the help manual, you can press / in the setting panel, or press Shift + Alt + / anywhere. How To Add Music?First, we should go to the Adding panel. For new user，QPlayer will show the Adding Panel it, For old user - Enter by Browser - Click Me 【Since QPlayer uses the same server as TicEase does, so don’t worry why it shows the page of TicEase】 Or You can Enter the page inside the Software. Clicking Anywhere of the Cover that brings you to the control panel. After that, click the green button on the right-top. Finally, click the ShortID button. Different from the Brower version, you don’t need to enter your ShortID if you launch the Adding page inside the software. What’s more, by modifying the ShortID, you can listen to other’s list. How to add Song / Lists The Pics in Manual are in Chinese, but do not worry, in the player, it should be in English. First, Click “Add Item (xxxx)” xxxx stands for your ShortID From Version 1.5.*, you do not have to get ID for a song or album, just URL. This is more convenient especially when you want to add songs from different music providers. How to get a URL? Take NetEase for example.Click Me Enter your own mainpage(Or That of Others) here： Select a List（ Here I use NHibiki喜欢的音乐 for example ～ Look at the Location：You would see http://music.163.com/#/playlist?id=91881742 , This url is exactly what you want. The Same, if you want to add song 前前前世 (movie ver.) when enter the song page, you can get location： http://music.163.com/#/song?id=426881487 and this is what you need. Then, we’ve got one list and one song. By the way, If you want to delete one option, please feel free to click it. if (location.href.indexOf('?') != -1) { var buttoncn = 'Enter The Adding Page'; document.getElementById(\\\"enteradden\\\").innerHTML = buttoncn; } If you have any question, please contact me. 版本更新 (Update Info.)V2.0.2 支持自动更新检查 V2.0.1 更完善的迷你界面 V2.0.0 更改透明度 修改Windows下的适配度 热缓存底部代码 迷你播放界面 V1.3.5 调整按钮精确度 修复点击无响应Bug Windows / Linux 试验性按钮 V1.3.4 添加初次启动手册显示 优化鼠标操作 添加2维鼠标操作 颜色调整 设置界面大小调整 V1.3.1 支持鼠标操作 支持全局键盘 V1.2.3 Windows界面调整 添加局部键盘 添加Configuration V1.2.1 支持Windows 添加私人歌单系统 添加注册系统 支持音量调整 V1.1.0 支持Linux 添加设置Panel 支持更改在线歌单 V1.0.1 修复字体溢出 修复Linux无法透明问题 V1.0.0 基本播放界面 渐变效果\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"},{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"node\",\"slug\":\"node\",\"permalink\":\"https://nekoyu.cc/tags/node/\"}]},{\"title\":\"【Node.js】Electron和坑\",\"slug\":\"electron\",\"date\":\"un66fin66\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/electron/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/electron/\",\"excerpt\":\"关于Electron我想我大概不用仔细介绍什么是Electron了。简单的说，Electron可以用Html，CSS，Javascript制作Cross Platform的Native APP。它使用Chromium和Nodejs作为解释器。 食用Electron之前，请保证自己的电脑 连接到了国际广域网 拥有至少1G的存储空间 不是拖拉机级别的处理器和内存 至少1秒钟之内不会蓝屏 装有Node.js并且没有把Terminal/bash/cmd之类的删掉 其他…\",\"text\":\"关于Electron我想我大概不用仔细介绍什么是Electron了。简单的说，Electron可以用Html，CSS，Javascript制作Cross Platform的Native APP。它使用Chromium和Nodejs作为解释器。 食用Electron之前，请保证自己的电脑 连接到了国际广域网 拥有至少1G的存储空间 不是拖拉机级别的处理器和内存 至少1秒钟之内不会蓝屏 装有Node.js并且没有把Terminal/bash/cmd之类的删掉 其他… 首先是安装没装Nodejs的请自行安装…. 最简单的方式是通过 npm install -g electron 来解决。 以下工具一起实用最佳：（以ヒビキ使用的Mac OS X为准） npm install -g electron-packager – 一个封装工具（可以把Chromium引擎和Nodejs与应用包装起来） wget https://dl.winehq.org/wine-builds/macosx/i686/winehq-staging-1.9.23.pkg – For Darwin(OS X) Only，为了打包 win32 必须用到wine. 对于GNU/Liunx，请自行下载或者编译wine. 创建最简单的应用编辑命令通过 npm init 新建新的 manifest.json 文件。打开并在script后添加如下命令，修改后效果如下 - 12345\\\"scripts\\\": &#123; \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" &amp;&amp; exit 1\\\", \\\"start\\\": \\\"electron .\\\", //如果是不是-g方式安装，请改成 \\\"start\\\": \\\"./node_modules/.bin/electron .\\\", \\\"packager\\\": \\\"electron-packager ./ MyApp --out ./OutApp --overwrite --all --icon=./ico.icns\\\" &#125;， 这就些命令可以通过 npm run-script 执行 对于 &quot;packager&quot; 的特殊说明： ./ Workdir MyApp 为显示的应用名 --out ./OutApp 为输出目录 --overwrite 表示覆盖旧版本 --all 为生成的 platform，all为全平台，当然你可以把它替换为 --platform=darwin --arch=x64 来限定平台（这个是x64的Max OS X） --icon 包图标 特殊说明：Max OS X 必须使用 icns 的专用图标格式， 其他的请使用 ico 格式。 入口脚本123456789101112131415161718192021222324252627282930313233343536\\\"use strict\\\";const electron = require('electron');const &#123;app&#125; = electron;const &#123;BrowserWindow&#125; = electron;let win; // 这样可以保证当次脚本推出之后回收窗口function createWindow() &#123; win = new BrowserWindow(&#123;width: 600, height: 400, resizable: false, maximizable: false, alwaysOnTop: true, fullscreenable: false, title: \\\"喵\\\" &#125;); win.loadURL(`file://$&#123;__dirname&#125;/view/index.html`); //win.webContents.openDevTools(); app.setName(\\\"喵\\\"); win.on('closed', () =&gt; &#123; win = null; &#125;);&#125;app.on('ready', createWindow);app.on('window-all-closed', () =&gt; &#123; if (process.platform !== 'darwin') &#123; app.quit(); &#125;&#125;);app.on('activate', () =&gt; &#123; if (win === null) &#123; createWindow(); &#125;&#125;); 然后，把你之前写的网页应用复制到 ./view 下，保证入口是 index.html 就好啦！ Electron的常用函数和坑win 创建选项 ‘width’／’height’ 宽度／高度 ‘title’ 窗口标题 ‘alwaysOnTop’ 是否永久置顶 ‘maximizable’ 是否可最大化 ‘resizable’ 是否可拉伸 ‘fullscreen’／’fullscreenable’ 全屏显示／是否可以全屏（后者用于Mac OS） ‘icon’ 图标，（注意！！选项，只在Windows和Linux下生效，而且，它是窗口图标，不是应用图标QwQ） ‘show’ 是否显示（默认是True） ‘closable’ 是否可以关闭2333（对Linux无效） ‘movable’ 是否可以移动（对Linux无效） ‘x’／’y’ 初始化的窗口位置（默认是屏幕正当中） win.on Listener ‘resize’ 窗口大小改变 ‘move’ 窗口移动 ‘show’ / ‘hide’ / ‘focus’ 窗口被显示／隐藏／鼠标或者Tab切换选中 ‘closed’ 窗口关闭 ‘responsive’ / ‘unresponsive’ 页面是否响应 还有很多参考官方API 坑·javascript环境切换如果你发现你的非Nodejs部分的脚本无法运行那么请参考以下方法： 因为javascript是通过Nodejs执行，所以，一定要在 &lt;script&gt;&lt;/script&gt; Tag 前后加入如下内容： 123&lt;script&gt;if (typeof module === 'object') &#123;window.module = module; module = undefined;&#125;&lt;/script&gt;&lt;script src=\\\"........\\\"&gt;&lt;/script&gt;&lt;script&gt;if (window.module) module = window.module;&lt;/script&gt; 因为在Nodejs执行页面Javascript时，极少数的JS会判断运行环境，所以我们要在运行页面脚本之前建立一个“虚拟”的页面环境，并在结束后还原Nodejs环境（神坑） 参考资料 http://electron.atom.io/docs/api/browser-window/ http://blog.csdn.net/sinat_25127047/article/details/51418682 http://stackoverflow.com/questions/31529772/how-to-set-app-icon-for-electron-atom-shell-app 以上 ～\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"},{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"node\",\"slug\":\"node\",\"permalink\":\"https://nekoyu.cc/tags/node/\"}]},{\"title\":\"【NekoBlog】基于Node.js的博客 · Simple · Beautiful\",\"slug\":\"nekoblog\",\"date\":\"un55fin55\",\"updated\":\"un55fin55\",\"comments\":true,\"path\":\"articles/nekoblog/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/nekoblog/\",\"excerpt\":\"我很懒 QwQ 就把介绍部分直接引用了 Demo 网站：点我 我一直很想写一个自己的博客，然后一直没时间写。 前几天在日常逛Html5Up的时候，猛然发现了一个非常适合做博客的Sample，于是就fetch了过来。 因为GUN协议的链式反应.. 我的再创作部分得开源，我想既然如此干脆就全部开源吧（至于有没有人想尝鲜我就不知道啦 哈哈哈）\",\"text\":\"我很懒 QwQ 就把介绍部分直接引用了 Demo 网站：点我 我一直很想写一个自己的博客，然后一直没时间写。 前几天在日常逛Html5Up的时候，猛然发现了一个非常适合做博客的Sample，于是就fetch了过来。 因为GUN协议的链式反应.. 我的再创作部分得开源，我想既然如此干脆就全部开源吧（至于有没有人想尝鲜我就不知道啦 哈哈哈） 跳转至Demo介绍页 写在开始因为这是我的Blog，我不愿意用Manual把我的风格破坏掉了。 还是老样子，我来说说我遇到的坑吧 ～ 坑·ejs内嵌函数页面生成我用的是ejs（喵喵） 然而，虽然ejs支持javascript表达式，但是坑无比多（毕竟人家就不是用来给你做算法的啊喂！） 于是，我不得不把很多一行就能解决的事情转移到nodejs里面 QwQ 坑·https问题从12/02版开始，NekoBlog支持https和强制https跳转。 于是，就要谈到Express的坑… Express无法创建https服务器 解决方法： 12var https = require('https');https.createServer(options, apps).listen(443); 其中 options 是一个 object， 里面包含 cert 和 key 两个键，值为他们的 文件内容（所以要用fs读取【文件不大，Sync与否无所谓啦】【强迫症退散！！！】） Express无法获取访问端口，和完整url 不过想想也是，毕竟Express的app只是一个由url发起的回调，底层信息都封装的话会不会比较厚重（当然，本来就是浅拷贝 0.0 还算不是那么重啦） 于是，我们无法在应用端判断访问的是http还是https 解决方法： var 两个 app，相当于创建两个独立的 app回调。（特别傻 坑·Express location跳转目前还没有解决 使用 respond.location 之后服务器不返回信息，加上 respond.end() 也一样。 Wwww 因为有alternative的办法，就不想研究下去了。 解决方法： 一个用http lib进行跳转 另一个 javascript 浏览器执行跳转（特别特别蠢蠢蠢） 坑·feed其实这也不算事一个坑吧。 使用插件node-rss。 但是因为先前从来没有关注过feed的构造，在构建feed时碰了很多钉子。 （比如 CDATA） 坑·Disqus虽然我已经写过很多Disqus的解决方案了，但是这个我不得不说。使用url来判断Disqus的板块确实是蠢了一点（其实 0.0 弄个自定义id什么的也挺好那） 解决方案： 伪url.. 修改了Disqus官方给出的javascript嵌入代码，每篇文章生成一个以文件名(xx.md)为标准的link[这个link正常人是无法知道也不会去访问的] 坑·文章排序我一直觉得，像Hexo那样根据文章内的date排序文章很不靠谱，于是，我写了一个根据文章birthtime排序的生成机制。 然而 然而 然而 后来才发现，这样做才不靠谱… 因为我的工作环境是Mac OS X，在Mac下是有birthtime这个文件属性的。然而，在Linux下，没有这个属性！！？？！ Linux下只有atime、mtime、ctime，分别对应读取，修改，权限修改时间。Exm?? 特别蠢的解决方案： 如果文章设定中有时间，并且符合格式，就按照设定的时间排序， 如果没有手动设定时间，就按照 (birthtime) 优先，否则 min(ctime, mtime)。 我的新部落格 大家好，欢迎来到我的新部落格。这是一个由node.js编写的部落格，我们可以把它叫做NekoBlog。我使用这个博客并不代表我原先的那个部落格被废弃了，相反，我只是想测试一下我的新部落格系统。首先，我要感谢一下HTML5UP。（嘿嘿，我怎么可能设计出这么美的主题呢？）另外，为什么现在有中文版了？因为有人抱怨谷歌翻译英文很累 wwww // 主要功能这个部落格系统使用 Markdown, ejs, 当然啦，还有我们的主角Node.js。 至于部落格的文件系统 - 可不是数据库啦！而是真正的文件系统 - （文章排序按照文件创建时间） 1234567NekoBlog|-- articles | -- ***.md -- ***.md -- ... 当我们运行这个部落格时，它会自动扫描 articles 目录，并且生成网站地图（这也代表它是一个半实时的系统）。 另外，它会同时读取个人信息配置文件 config.js 。 因此，喵还是推荐每个人在使用前自己配制一下的啦！ 新功能（比英文版要前一些） 本部落格系统自动采用 Disqus 评论系统 （针对中国用户，或会在下版更新的时候提供双系统自动切换） 另外，本部落格使用了基于 Disqus 官方API开发的 Recommand 数显示（它不仅仅局限于显示评论数啦，源码可以见我的原部落格） 使用全文搜索系统 每篇文章需要单独配置文章信息（和 Hexo 相似，不过这里不用yml格式，而是用json形式） 你可以为你的文章定制固定连接 支持 More 标签支持，可以显示部分文章内容到主页，More的正确写法为： 1&lt;!--More--&gt; 支持文章随机推荐 即将支持 atom.xml RSS订阅\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"},{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"node\",\"slug\":\"node\",\"permalink\":\"https://nekoyu.cc/tags/node/\"}]},{\"title\":\"【KNN】KNN算法以及其实用性分析\",\"slug\":\"knn-thought\",\"date\":\"un44fin44\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/knn-thought/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/knn-thought/\",\"excerpt\":\"最近总是不务正业 （ 喂 明明是一只和逻辑打交道的猫，却总是想设计自己的网站不过 好在 NekoGal 和 HibikiHome 都暂时结束了 www是啊 还是来写一点学术性的东西吧\",\"text\":\"最近总是不务正业 （ 喂 明明是一只和逻辑打交道的猫，却总是想设计自己的网站不过 好在 NekoGal 和 HibikiHome 都暂时结束了 www是啊 还是来写一点学术性的东西吧 介绍Q: 什么是KNN？ 其实，回答这个问题很简单，wiki上搜一下就好了。 但紧接着的问题就是，wiki上的回答我们未必看得懂。因此，它需要一个更加简单的定义。 K-Nearest Neighbour，K临近算法。是Data Science（数据科学）中最简单的算法之一。 用最简单的语言形容，它就是“空间距离+排序”。可以说，完完全全的数学思想。也可以算是机器学习的入门算法了。 KNN的基本思想 准备两套数据，一套用于学习训练，一套用于校验。 学习多套数据，并且绘制多维散点图。 采集新数据。 计算新数据到各个学习数据点的距离，并选取K的最邻近的点。将它们的主要属性作为新数据的熟悉。 枚举K，找到一个校验错误率最低的K，并固定（这就是为什么KNN一般分析不了大数据，因为它的空间是O(N)但是时间是O(N2)；而且它最后学习的权值只有K一个整数。如果我们使用ANN或者更佳标准的CNN，我们就能分析更加复杂的情况） 用获得的K进行大批量数据分析。 KNN的实现TAT 这就不用我写了吧，都是队列操作和循环操作… （而且实例一大堆 www KNN的实用性分析KNN可以用于简单的模式识别。如识别英文字母，线性条件分析。但是手势识别、图片识别，它的劣势就非常明显了… 另外，KNN的容错率很低，换句话说，如果N个属性中有一个无关属性，就会导致学习大量出错（CNN可以分析出属性的比重，因此可以规避这样的问题）。KNN有这样的问题是由于，如果录入了N个属性，就代表会生成一张N维图，但是，每个维度的权重都是1/N，因此，无关属性会极端影响机器学习。 KNN改进措施其实，除了如上的问题，（这个是算法本身的缺陷，大概是没办法改的）时间复杂度是可以降低的。 这里用到的思想是散点聚集的思想。（这有个前提要求，就是学习的样本量要很大）这样就可以画出一个多维的圆。从而不需要把实验数据与每一个样本数据比较，只需要计算多维圆心点到直线的距离就行了。 但这样会遇到一个问题，就是，我们并不知道圆的界限是什么，换句话说，我们需要多少个多维圆。那么最傻的方法就是穷举。因此.. （它似乎变成了K2NN ？？？）尽管如此，它的效率也比原先的O(N2)要高得多。 总结所以，总结就一句话：KNN适合线性，数据量不是特别大，规律性强的数据群分析。 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"python\",\"slug\":\"python\",\"permalink\":\"https://nekoyu.cc/tags/python/\"}]},{\"title\":\"【NekoGal】由纯Javascript实现的HTML5 Galgame框架\",\"slug\":\"nekogal\",\"date\":\"un33fin33\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/nekogal/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/nekogal/\",\"excerpt\":\"最新更新于 2016/11/29 更新日志见Github 更新的文章内容见底部 目前的进度请见Github Demo站：点我喵 Nightly-Debug站：点我喵呜(我会在第二版正式版发布后离开 www) &nbsp; 项目简介：我就用问答形式吧 QwQ -\",\"text\":\"最新更新于 2016/11/29 更新日志见Github 更新的文章内容见底部 目前的进度请见Github Demo站：点我喵 Nightly-Debug站：点我喵呜(我会在第二版正式版发布后离开 www) &nbsp; 项目简介：我就用问答形式吧 QwQ - Q：为什么要写这个框架呢？ A：窝窝窝… 也不知道… 只是因为好玩吧… 最近一直在研究Interactive Media Art（多媒体交互），就想设计一个用于交流的框架，于是就自然想到Online Galgame了… Q: 这个框架有什么用呢？ A: 目前这个框架只支持念白，图片，多选一选择，和独白跳转… 但我以后还会成长！ 我还会有 BGM，字幕动画，字幕变色，以及选项关系积分累积（用于攻略度等等…不开车！！） 跳过使用方法看日记QwQ Q: 这个框架兼容性怎么样呢？ A: www 这个窝还没有仔细考虑呐QwQ，嘛，至少手机电脑都能用.. 窝觉得，还是把自适应交给网站设计者吧（默认Relative，偷偷溜走） Q: 这个框架重量如何？ A: 不需要jQuery，Button目前借助于bootstrap css，但是肯定会把它扔掉的啦！！ Q: 写剧本会不会很麻烦？ A: 不会！！剧本采用（形式，内容，关联）的形式，以JSON方式读入。（可以外链可以内链，框架自带跨域请求） 比如 1234567891011121314151617181920[&#123; \\\"type\\\": \\\"option\\\", //形式，目前有option，text，picture 3项 分别表示此对话是 选项，独白，图片 \\\"content\\\": \\\"Hello, Master\\\", //内容，图片是连接URL，其他的都是显示文字 // \\\"jump\\\": 2 如果是独白 可以设置这个，这样就可以在播放之后跳转到相应位置的对话 \\\"options\\\": &#123; \\\"你好\\\": 2, \\\"你坏\\\": 3 &#125; //选项，以及点击后跳转的位置 \\\"color\\\": \\\"rgb(0,0,0)\\\", //单句颜色 \\\"duration\\\": 10, //字幕滚动速度 \\\"withdraw\\\": true, //选项选择之后撤回显示 \\\"bgm\\\": \\\"1.mp3\\\", //更换背景音乐，如果是\\\"0\\\"则暂停，如果是“1”则继续播放 \\\"bgp\\\": \\\"pic.png\\\", //更换背景图片，如果是\\\"0\\\"则删除 \\\"dialog\\\": \\\"d.mp3\\\" //播放对话语音（本句结束后将自动停止，若下一句的此选项设置为\\\"1\\\"，则在下一句不停止，以此类推） //...&#125;,&#123; // 第二句对话&#125;//.... 第N句] Q: 那那那！如果我想用js控制播放，而不要自动播放或者单机播放呢！ A: 每个对话播放前都会触发callfront回调，结束时都会触发callback回调。所以没关系的喵 ～ Q: 那么，初始化的要求，以及接口呢QwQ？ A: 请看下表 ～ 构造： 1var ng = new NekoGal(脚本JSON或者脚本URL, 显示DOM的id[, 自定义选项]); 自定义选项： 12345678910111213141516config = &#123; animation : true , //播放字幕滚动动画 anispeed : 50 , //字幕滚动默认速度 autoplay : false , //自动播放（是否要鼠标点击） repeat : false , //重复播放 interval : 1000 , //句间隔时间（限自动播放） background : \\\"rgba(0,0,0,1)\\\" , //背景颜色 color : \\\"rgba(255,255,255,1)\\\" , //字幕颜色 scriptbg : \\\"rgba(255,255,255,0.3)\\\" , //字幕背景（透明会好看些哦！） lineheight : 10 , //行数，超过行数会自动把第一行删去 startheight : 0 , //起始高度（单位px）有何用途可以见Demo picdefault : \\\"height:50px;width:50px\\\" , //句中画style设置 callfront : function(id, current) &#123;&#125; , //前回调 callback : function(id, current) &#123;&#125; , //后回调 id : parseInt(Math.random() * 100000) //生成唯一ID 以便有多个NekoGal同时出现&#125; Q: 那我怎么用javascript定位某一个Gal呢？ A: 通过以下方法： window.NG_LIST 获取所有活着的NekoGal window.NG_{ID} {ID}换成唯一new时候的xxx.id 其他详情可以参考样例剧本（Demo右键源代码） 项目坑： 嘛 其实，从这里开始才是这篇Blog的目的嘛 TAT （变回自己的感觉真好 做这个真的很好玩，虽然中间踩了很多坑： Javascript中 給Interval传参这真的是大坑… 不过还好填掉了 TAT 我们习惯用 123this.timer = setInterval(function()&#123; this.next();&#125;, this.interval); 做timer。但其实，这是错的，因为 this.next() 的this不是NekoGal，而是window（window调用setInterval），window下自然没有next() 所以报错… 那么怎么传参呢？最简单的是clone一下 再加上 function的apply方法： （记住，因为this是关键词，一定要先把它赋值給另外的变量） （通过赋值函数f伪闭包clone一下，记住后面不能有括号！！！） （最后用apply方法把f中的this替换为THIS，即NekoGal的this） 代码： 12345var THIS = this;var f = this.next;this.timer = setInterval(function()&#123; f.apply(THIS);&#125;, this.interval); 动态装载CSS其实这个我只想吐槽一下，动态装载了CSS居然可以自动读取一遍！！真的超方便（虽然想不出如果不自动读取怎么加载它 TAT 方法很简单，跨域请求CSS，构建CSS，获取head的dom，appendChild就好了。 构建类不是特别清楚Javascript怎么构建类，翻了以前自己写的CSSSuperfitter，copy一下下…. 第三版小版过后思考的事情现在，大部分GalGame功能已经就绪了 而且，喵觉得QwQ 适配这个Scripter的Script写起来应该很舒服才对（似乎新人都非常喜欢某种叫goto的东西） 于是，现在就要想一些复杂的东西啦。 而我打算开的一个大坑就是：关系表达式 关系表达式所谓关系表达式就是指，可以让编剧拟定x，y这种变量的存在。 它有什么用途呢？比如，有的时候，不管我选A，B，还是C，故事都不会分叉，但是老司机嘴边的“攻略度”会发生改变。而某些独特的剧情只有在“攻略度”达到一定程度之后才能被触发。因此，一定要有这种计算方式。 虽然嘛QWQ 这种计算过程对我来说很简单，比如一个object “x”: “+1”，那么只要parse一下就完成了。 但是在判定的时候，就会有问题。比如，”x &gt;= 100 and y &lt; 5”，或者更为复杂的就要用自建函数的方法如 “x &gt;= 100 and {all:except x} &lt; 5” （喂喂喂 Hibi酱不要随随便便给自己挖坑啊！！！） 这个。。很有挑战性。毕竟，有个著名的哲人说过“生命在于挖坑”嘛 // ？？谁说的喵忘记了 PxP Script加密这个..目前来说暂时不需要吧，因为咱又没有什么很火的游戏…（嗯嗯？咱听起来好萌呀 UxU 不过，json格式的script有个问题，就是，如果有些变态大佬不想看剧情，只想看CG，他直接一个RegExp就把script里的图片都搞了出来…这样岂不是很没面子？很没有体验感？因此，加密一下比较好… Video Background如果哪一天我想玩日在校园 （ ？？？？移植一些有视频的游戏 那么，这时候background-image就可以切换为background-video Input Interaction如果交流只有按钮的话，生活岂不是太无趣了？ 喵喵想让角色念玩家的名字，和玩家互动，和玩家一起缘之空（大雾 然后，通过搜索关键词和近义词算法可以判断玩家的倾向，从而改变关系表达式或者匹配选项 嘛不过这些毕竟还是筹划中的事情，有可能晚上又有一个新的Post，也有可能几万年以后你们才能看到我的new edition… 以上\",\"categories\":[{\"name\":\"PHP酱\",\"slug\":\"PHP酱\",\"permalink\":\"https://nekoyu.cc/categories/PHP酱/\"},{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"PHP酱/我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/PHP酱/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"css\",\"slug\":\"css\",\"permalink\":\"https://nekoyu.cc/tags/css/\"},{\"name\":\"javascript\",\"slug\":\"javascript\",\"permalink\":\"https://nekoyu.cc/tags/javascript/\"},{\"name\":\"轮子\",\"slug\":\"轮子\",\"permalink\":\"https://nekoyu.cc/tags/轮子/\"}]},{\"title\":\"【填坑】正式发布一下几个世纪前写的短链系统\",\"slug\":\"nya-slink\",\"date\":\"un55fin55\",\"updated\":\"un44fin44\",\"comments\":true,\"path\":\"articles/nya-slink/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/nya-slink/\",\"excerpt\":\"这里是填坑语录... 其实，这个短链系统不应该这么晚发布。但是（总是要有一些特殊原因的嘛），因为当时想要写文章的时候还有一些bug没有解决，解决了之后又快要高考了，于是我就把发布这件事抛在脑后了。（废话，就是因为你懒！）至于为什么高考结束后4个月我才写这篇文章？我是这么想的——反正已经推迟发布了，干脆就再晚一些吧，正好做个稳定性测试（别烦！就是因为你懒！！！）不过很庆幸的是，半年来它坚持了下来，log中expect项也几乎没有（喂喂喂！那是因为你没把功能开全）。我就借此期中考试的空档写一下这篇文章。\",\"text\":\"这里是填坑语录... 其实，这个短链系统不应该这么晚发布。但是（总是要有一些特殊原因的嘛），因为当时想要写文章的时候还有一些bug没有解决，解决了之后又快要高考了，于是我就把发布这件事抛在脑后了。（废话，就是因为你懒！）至于为什么高考结束后4个月我才写这篇文章？我是这么想的——反正已经推迟发布了，干脆就再晚一些吧，正好做个稳定性测试（别烦！就是因为你懒！！！）不过很庆幸的是，半年来它坚持了下来，log中expect项也几乎没有（喂喂喂！那是因为你没把功能开全）。我就借此期中考试的空档写一下这篇文章。 另类的开头我知道有很多人不喜欢废话，所以我干脆把最重要的放在最前面～ Demo地址：（其实不能说是Demo吧。。完全可以是线上地址了） 服务器位置：DaoCloud香港服务器 http://喵.cc/ 源码地址： 托管网站：Github https://github.com/NHibiki/slink/ 其他声明： 后台：node.js 前台：node.js ／ bootstrap ／ jquery Animate 数据库：Mongodb 开源信息：GPLv3 非商业化扩散式开源协议 扩散式或非扩散式开源库：（包括修改和非修改）mongoose／short／http-proxy／jade 链式产品：Slink-Docker：（可一键搭建至DaoCloud）https://github.com/NHibiki/docker-nodejs-slink 如果只是来看这个product的，发布信息到此结束～ 如果是来看響喵的～ 请继续QwQ nya～ 正片友情链接：挖坑地址：https://nekoyu.cc/articles/try-docker/ 其实，这里我也没什么好说的～ 毕竟简介和使用说明都在README页中了，又有中文又有英文，个人感觉还是非常customize的。 那这里我就说一下当时写这个Slink的思路吧 起因goo.gl 这个短链大家应该都不陌生吧（什么！你没听说过？出门右转Google不谢 TAT）（什么！没办法Google？……给你两个解决办法：1. 百度一下怎么去Google；2. 搜搜一下怎么去Google）这个是Google提供的短链服务。然而，不幸的是在天朝很多人都没听说过Google被“信息保护”了，为了创造富.强民?主文!明和@谐的网络环境，我们不得不过滤掉一些过分Authentic的Information。于是，goo.gl短链自然也被exclude了。【严肃脸 （好吧，我承认。。真正的原因是我买了一个 喵.cc 的域名，不知道该怎么用2333） 因为当时我还没有研究过nginx转发php的route系统，所以，提到route，我第一个想到的自然是python下的flask框架（别问我为什么不用Django）和node.js。本着python不是“正统”编程语言的执念（喂！javascript就是吗？？嗯？我什么都不知道）我毅然决然地选择了pythonnode.js 工作思路如下： http(s)://domain.name/route 因为短链中不会出现特殊字符，所以我就用-当作是区分短链和回溯地址的标志（为了防止未来做api系统时发生问题，暂不用get／post方法区分【虽然，api到现在还没写hhh】） 例如：当post地址到 -get 的时候，nodejs后台就知道这不是短链，而是要执行某种特殊的指令 于是，就有了这样一个过程 请求index post生成短链 normal request跳转 我在我的slink中又增加了一个不是轮子的轮子，那就是除了302跳转，还有reverse proxy跳转（这个功能在Demo中虽然可以选，但是没有用（因为DaoCloud最近对它限制住了）） 于是就多了 写入temporate session 如果有session就不用302，用http-proxy进行反向代理 整个过程除了reverse proxy有点烦，其他的都很容易解决 Extrasreverse proxy有一个bug，那就是在一个浏览器中无法反代两个网站，第二个网站会覆盖掉第一个网站。（这个目前没有解决办法，只能等以后浏览器或者html进化增加新功能了【比如判断用户是否一直是在页面上操作而不是通过url跳转，简言之，输入URL跳转发生的回掉】） 之后，我又用Dockfile和DaoCloud做了联动，只要在DaoCloud输入我上面的Docker部署git的Dockfile，就可以一键部署最新的slink 至于其他的，想到什么在补充吧 在这里我要立一个flag – 我会在一个月之内把api和批量生成等东西做好QWQ 以上 各位！万圣节快乐～！\",\"categories\":[{\"name\":\"我的玩具不可能这么可爱\",\"slug\":\"我的玩具不可能这么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能这么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"},{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"Slink\",\"slug\":\"Slink\",\"permalink\":\"https://nekoyu.cc/tags/Slink/\"}]},{\"title\":\"【日常】萤火虫漫展 - 2016.10\",\"slug\":\"firefly-2016\",\"date\":\"un11fin11\",\"updated\":\"un11fin11\",\"comments\":true,\"path\":\"articles/firefly-2016/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/firefly-2016/\",\"excerpt\":\"多图慎入 ！！ 多图慎入 ！！ 多图慎入 ！！ 重要的事情说三遍 ！！！ 前言： 这是我第一次参加漫展… 是的… 虽然我面基过、COS过、信仰过… 但是参加漫展还真的是第一次。对于我这种萌新，我只想说，这次的漫展真的让我非常吃惊（嗯，惊讶于 死宅们 的power）。总之，这次我就把我的experience以图文的方式写一下吧。顺便给博客除一下草~~\",\"text\":\"多图慎入 ！！ 多图慎入 ！！ 多图慎入 ！！ 重要的事情说三遍 ！！！ 前言： 这是我第一次参加漫展… 是的… 虽然我面基过、COS过、信仰过… 但是参加漫展还真的是第一次。对于我这种萌新，我只想说，这次的漫展真的让我非常吃惊（嗯，惊讶于 死宅们 的power）。总之，这次我就把我的experience以图文的方式写一下吧。顺便给博客除一下草~~ 早晨我们“料想”，既是漫展第一天，又是国庆第二天，还在上海浦东，人一定会很多。于是，我们就起得很早很早（7点30分对我们而言已经是很早很早了…）但事实上，为了等一个猪队友.. 我们居然到8点30分才出发 TAT （这里的我们指的是我和我的朋友和朋友的朋友和朋友的朋友的朋友..） 因为从来没有去过漫展，我也不知道漫展是什么样子，我更不知道我会在漫展呆多久.. 好吧，反正 いろいろ 的原因…导致我居然就随便穿了一套运动服就出门了（到漫展之后想死的心都有了TAT） 从金桥站上车，6号线到世纪大道，转2号线到龙阳路，在坐一站7号线到达会展中心。 人并不多（炒鸡出乎意料），我们居然没有被当成蹦床挤来挤去…（鉴于我的体型，我在这种“肉搏战”中只能当炮灰） 然后！第一张图 ~~ （摄于龙阳路 2 - 7 换乘通道） 虽然没有看到正脸，但是这个宫园熏还是可以让人眼前一亮的！既然在换乘就已经可以看到COSer.. 那就代表这次的活动确实不小啊！！ 到站的时候，果然看到了更多的COSer – μ’s、穹妹、刀剑乱舞、Asuna等等 甚至，还有有幸看到了土豪的玩具 .. 进入会场到了会场发现，虽然人很多，但并没有排成长龙、密密麻麻。所有人都很遵守次序，因此入口通道并没有被堵住。也因为这样，我们一下子就走入了展厅。 新世界的大门就这样打开了… 对于一个萌新而言，我只能瑟瑟发抖QwQ。 这里确实是二次元的聚集地 – Lolita服装区、手办周边区、角川书店、暴走、基本上90%的上场时间都给LLer(μ’ser)的舞台、各种手游手游和手游、同人画展厅… 如此的Exhibition瞬间让我产生了“我要睡在这儿里”的念头2333 大舞台演出表： 派派要来派派要来！！！ 饭饭也要来QwQ ~~~~ 给我最爱的果皇 ~ 愛している！ほのかじゃん！ And バカ ちかじゃん！ 然后是各种COSerPoker 海姬~ Poker 果海~~ 国欠妹 TAT りんにゃ 可愛い！！！ Rem Ram ！！！ “嗯 谢谢你雷姆，我爱艾米莉亚” QwQ “诶呀..这是最气的..” Tiny Rem~ さいこ～ 詩の！詩の！ 大好きな！ 黑子 炮姐 御坂妹妹 Index 你们的当妈呢？当妈呢？？？ 如果满分是10分，这个造型我给10.01分.. 看黑子偷着乐呢hhhh 我。。真的。。需要，，治愈一下 ww 最后是画师签售会著名东方画师 りいちゅ 将会亲临现场签售她的限定画集~ 看了她的展品之后，被她的画风吸引了。。于是就神一般地吃了土..总之。能那么近得接近画师..并用自己都快看不下去的日语和她唠两句。。我觉得当时我一定喝了维他柠檬茶… 遗憾&amp;总结遗憾的是，我也想COS一下然后再去展厅（喂喂喂！我说的COS是指COS男性角色！！！别想其他的！！！我身高够的！哼！） 更遗憾的是，因为下午有事。没办法见到饭饭了 TAT 然后，今天有一个外国人强行想拉我去一次萤火虫（原因是我昨天没有叫他）。我在犹豫中0.0 因为今天去就意味着可以见到派派..但是我又不太想出去0.0 毕竟今天要赶一首曲子的编曲，不太想让其他事情烦自己（天哪，好想把自己分成两块233） 不过，总的来说..这一次的活动对我影响很大。 我想再去一次。。不对。。很多次。。 如果有大佬知道上海有这样的活动！！一定要带上響喵啊！！！ 最后！各位大佬！国庆快乐！！！ μ’s专辑，以此纪念我的 First Love\",\"categories\":[{\"name\":\"这里是宇宙\",\"slug\":\"这里是宇宙\",\"permalink\":\"https://nekoyu.cc/categories/这里是宇宙/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Animate\",\"slug\":\"Animate\",\"permalink\":\"https://nekoyu.cc/tags/Animate/\"}]},{\"title\":\"【Telegram】Design A Self-owned Bot On Tg\",\"slug\":\"telegram-bot\",\"date\":\"un22fin22\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/telegram-bot/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/telegram-bot/\",\"excerpt\":\"告所有访客，因为響喵很快就要进入纯英文的大学环境，因此有的时候会用英文写文章。为了方便读者，我会给一个中文简介，如果我的狗爬英文实在让您无法忍受 QAQ 请留言，我会添加翻译 Summary (简介)我将向各位菊苣介绍，什么是TgBot，以及怎么用PHP（？？？PHP？是！就是PHP）建立自己的Bot。 Introduction First, let us learn something about Telegram. Telegram - a new era of messaging It is a brief definition on its website - [Click Me] Yup ~ As you see, it is a encrypted &amp; totally source-opened chatting software.\",\"text\":\"告所有访客，因为響喵很快就要进入纯英文的大学环境，因此有的时候会用英文写文章。为了方便读者，我会给一个中文简介，如果我的狗爬英文实在让您无法忍受 QAQ 请留言，我会添加翻译 Summary (简介)我将向各位菊苣介绍，什么是TgBot，以及怎么用PHP（？？？PHP？是！就是PHP）建立自己的Bot。 Introduction First, let us learn something about Telegram. Telegram - a new era of messaging It is a brief definition on its website - [Click Me] Yup ~ As you see, it is a encrypted &amp; totally source-opened chatting software. Till now, the software has successfully captured all popular platforms. Likes Android, IOS, WindowsPhone, Chrome, Html5 Web, Mac OS, Windows, Linux , etc. Since the API of this chatting software is definately available to all developers, the number of this soft is still increasing sharply. Then, what is TgBot ? Telegram Bot - An interesting Feature of Telegram, which let all developers to create their own ‘Auto-Responding User’, in another word, AI (it is depend on what function do you give the bot). Since TgBot is based on https transfer with no long connection, all server can serve for it. PHP / JSP / Java / Nodejs / Python (Django) / GoLang / Ruby, etc. You have two options to get messages from telegram server : Web Hook Manually Get/Push Method Normally, we use the previous one to get user’s direction directly and swiftly when user contect with the bot account. It is popularly used is because its zero-delay character. Start To Build A BotCreate A Telegram Account - it is easy, because it is as convenient as your native message app ~ Search User ‘BotFather’ He will create a bot user for you /// Send Message ‘/newbot’ and follow its directions. You Will Get A Token Then, Father’s Works are all done. Let’s constract our SERVER. Choose whichever programming platform you like. ( If only it has port listenning , ssl and webpost/webget function. ) [Tgbot doesn’t support non-ssl connection webhook.] It chose PHP. I build A litter quite Bot on my own (Use No third-party API OR frame) Coding ……Will, If I talk about Coding.. maybe it won’t be enough unless I create a WHOLE TgBot wiki…. Just a matter of Post/Get. If you have any question, You can leave a message on my web, or Contact @HibiCon. You can see it on My Github (It is private until it is all done, If you want desperately QAQ, you can also contact me to get all sources.) OR You can Goto @HibiBot to use my bot directly. Regard ~\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"PHP\",\"slug\":\"PHP\",\"permalink\":\"https://nekoyu.cc/tags/PHP/\"},{\"name\":\"Telegram\",\"slug\":\"Telegram\",\"permalink\":\"https://nekoyu.cc/tags/Telegram/\"}]},{\"title\":\"【Node.js】自动编译/安装脚本\",\"slug\":\"node-installer\",\"date\":\"un11fin11\",\"updated\":\"un11fin11\",\"comments\":true,\"path\":\"articles/node-installer/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/node-installer/\",\"excerpt\":\"\",\"text\":\"因为一直要开新的主机，每次开新主机又要重装Node.js，特别烦，于是就写了一个脚本。 这一Post很简单，脚本地址，结束。 CentosUbuntu 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"Node\",\"slug\":\"Node\",\"permalink\":\"https://nekoyu.cc/tags/Node/\"}]},{\"title\":\"【Linux】配置Let's Encrypt并自动更新\",\"slug\":\"install-letsencrypt\",\"date\":\"un66fin66\",\"updated\":\"un66fin66\",\"comments\":true,\"path\":\"articles/install-letsencrypt/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/install-letsencrypt/\",\"excerpt\":\"Let’s Encrypt随着vps运算能力逐渐增强，SSL (https) 基本上成了标配。但是似乎不是所有人都能支付得起“昂贵的证书费用”（当然，如果你选择国内那家免费3年证书的某X机构，你可以不用往下看了） 虽然网上写Let’s Encrypt的文章很多，但是总觉得那些教程都太难。一个简简单单的 Let’s Encrypt，当然要用简单的文字来描述清楚。因此，就有了这篇小小小白文。 PS：以下内容都用Nginx作为分发终端，因此，ssl默认挂在Nginx上，apache/nodejs/golang同理。\",\"text\":\"Let’s Encrypt随着vps运算能力逐渐增强，SSL (https) 基本上成了标配。但是似乎不是所有人都能支付得起“昂贵的证书费用”（当然，如果你选择国内那家免费3年证书的某X机构，你可以不用往下看了） 虽然网上写Let’s Encrypt的文章很多，但是总觉得那些教程都太难。一个简简单单的 Let’s Encrypt，当然要用简单的文字来描述清楚。因此，就有了这篇小小小白文。 PS：以下内容都用Nginx作为分发终端，因此，ssl默认挂在Nginx上，apache/nodejs/golang同理。 安装两句话结束~ （我使用的是 Centos 6，Ubuntu和Debian患者请自行修改源命令） 123yum update &amp;&amp; yum install gitgit clone https://github.com/letsencrypt/letsencrypt.git /home/lec#下载 申请证书因为 LEC 申请证书的时候，要检验域名/服务器的对应关系，要用到80端口，所以，在申请前，请把Nginx等服务终止。 1service nginx stop 你可以直接通过执行 letsencrypt-auto 文件，进行可视化操作。当然，你也可以一个脚本解决所有问题。 PS：LEC 的命令似乎与之前发生了变化，因此有所不同。 直接点： 1./letsencrypt-auto certonly -d [你的域名] --agree-tos --standalone --renew-by-default 当你看到Congratulations xxxx…… 就说明已经成功了 配置生成的证书文件默认保存在 /etc/letsencrypt/live/ [你的域名] / 中，只要把 nginx.conf 中的ssl地址指过去就大功告成了 1234567server &#123; listen 443; ssl on; ssl_certificate /etc/letsencrypt/live/[你的域名] /fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/[你的域名] /privkey.pem; ... 以下是webroot等常规设置&#125; 最后，重启你的服务器 1service nginx stop 你可以看到，你的网站上已经成功挂上了一个 3个月 的ssl证书。 如果你想强制把http转为加密的https链接，你可以设置一个端口转发： 1234server &#123; listen 80; rewrite ^(.*)$ https://$host$1 permanent; &#125; 如果是多域名服务器，同样可以用 “server_name”加以区别。 最后，你可能需要一个定时器，帮助你定时自动更新证书。 因为我没有这个需求，所以就没有从测试，直接从网上down来的cron命令（cron我还没有仔细研究过QAQ，唉都是webmin害的） 1echo \\\"0 0 */60 * * [你的脚本地址]\\\" &gt;&gt; /etc/crontab 脚本这里我已经写好了一个，们可以自己取用 【脚本下载】 PS：别忘了增加执行权限！！！ 以上\",\"categories\":[{\"name\":\"我的玩具不可能这么可爱\",\"slug\":\"我的玩具不可能这么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能这么可爱/\"}],\"tags\":[{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"Linux\",\"slug\":\"Linux\",\"permalink\":\"https://nekoyu.cc/tags/Linux/\"},{\"name\":\"Server\",\"slug\":\"Server\",\"permalink\":\"https://nekoyu.cc/tags/Server/\"},{\"name\":\"ssl\",\"slug\":\"ssl\",\"permalink\":\"https://nekoyu.cc/tags/ssl/\"}]},{\"title\":\"【Linux】安装万能下载工具 MlDonkey\",\"slug\":\"install-mldonkey\",\"date\":\"un55fin55\",\"updated\":\"un55fin55\",\"comments\":true,\"path\":\"articles/install-mldonkey/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/install-mldonkey/\",\"excerpt\":\"简介说起Linux中的文件下载，在我们的脑海中立刻浮现的可能是 wget / aria2 。这些可谓是 Storige Server 的必备工具了。但是，他们还是有一个缺陷。wget只能下载直连，这就不多说了。aria2的下载范围更广一些，但它也只能解析torrent，没办法下载电驴等其他p2p协议下的文件。 图形系统下的工具我们就不提了，我们需要的是一个命令行+Web管理的下载工具。于是乎，MlDonkey就浮现在我们眼前了。 MlDonkey不是一个新项目，我倒Sourceforge看了一下，最早Push的时间是在 2006-01-05。最近一次更新是在 2014-03-22。但从我个人的体验上看，这个项目还是不错的。 插曲：为什么突然想到要搭建远程下载服务器呢？因为我要在Vultr上自定义WinServer镜像呀QAQ\",\"text\":\"简介说起Linux中的文件下载，在我们的脑海中立刻浮现的可能是 wget / aria2 。这些可谓是 Storige Server 的必备工具了。但是，他们还是有一个缺陷。wget只能下载直连，这就不多说了。aria2的下载范围更广一些，但它也只能解析torrent，没办法下载电驴等其他p2p协议下的文件。 图形系统下的工具我们就不提了，我们需要的是一个命令行+Web管理的下载工具。于是乎，MlDonkey就浮现在我们眼前了。 MlDonkey不是一个新项目，我倒Sourceforge看了一下，最早Push的时间是在 2006-01-05。最近一次更新是在 2014-03-22。但从我个人的体验上看，这个项目还是不错的。 插曲：为什么突然想到要搭建远程下载服务器呢？因为我要在Vultr上自定义WinServer镜像呀QAQ 安装走了不少弯路，就像一开始，我看到网上有很多人说，直接用静态编译版（static）就好了，结果就出现了莫名其妙的错误。【谁说的！给我打一顿 TAT 筋疲力竭的我决定还是自己编译2014年的源代码QAQ 首先，你要确保自己的服务器中有 gcc / g++ / make / wget / zlib 存在，如果没有，请安装。（给出的是Ubuntu的命令，其他Linux请自行修改Repository指令） 1apt-get update &amp;&amp; apt-get install -y gcc g++ make wget zlib1g-dev 然后，下载“最新”的MlDonkey，解压。编译，安装 重要提示：zlib一般Linux中都不自带，一般情况下都要手动安装 1234567891011wget https://sourceforge.net/projects/mldonkey/files/mldonkey/3.1.5/mldonkey-3.1.5.tar.bz2//下载tar -jxvf mldonkey-3.1.5.tar.bz2//解压cd mldonkey-3.1.5./configure//配置，中间它会要求下载一个附加库，Y回车即可make//编译make install//安装 至此，MlDonkey安装结束。 你可以直接 1mlnet 如果安装成功，那么最后一行指令应该是 [dMain] Core started 配置Ctrl + C 结束进程 进入配置目录 1cd ~/.mldonkey 编辑downloads.ini (vim/vi/或其他都可以) 找到 allowed_ips = [“127.0.0.1”;] 改为 allowed_ips = [“0.0.0.0/0”;] 在42%处找到 shared_directories 【在vim中，你也可以使用查找命令 “/shared_directories”】直接跳转到该位置 把两个incoming的dirname改为自己想要的目录，这里我就设置成了“/home/files” 修改后的片段如下： 12345678910111213 shared_directories = [ &#123; dirname = shared strategy = all_files priority = 0&#125;; &#123; dirname = \\\"/home/files\\\" strategy = incoming_files priority = 0&#125;; &#123; dirname = \\\"/home/files\\\" strategy = incoming_directories priority = 0&#125;;] 保存，mkdir建立设置的目录 然后。你就可以用screen命令启动mlnet了 进入 http://你的服务器ip:4080 在命令栏中输入 useradd admin 你的密码 这样，以后用web访问，就需要登陆了 至此，教程结束 以上\",\"categories\":[{\"name\":\"我的玩具不可能这么可爱\",\"slug\":\"我的玩具不可能这么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能这么可爱/\"}],\"tags\":[{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"Linux\",\"slug\":\"Linux\",\"permalink\":\"https://nekoyu.cc/tags/Linux/\"},{\"name\":\"Server\",\"slug\":\"Server\",\"permalink\":\"https://nekoyu.cc/tags/Server/\"},{\"name\":\"Download\",\"slug\":\"Download\",\"permalink\":\"https://nekoyu.cc/tags/Download/\"}]},{\"title\":\"【日常】神一般的“高考”和“高考后”\",\"slug\":\"about-what-xxx\",\"date\":\"un55fin55\",\"updated\":\"un55fin55\",\"comments\":true,\"path\":\"articles/about-what-xxx/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/about-what-xxx/\",\"excerpt\":\"神一般的高考 -- 没有（江苏）高考过的孩子建议直接读后半部分，不然你会被我这个“学葩”误导QAQ。 再来一段PS，如果你想参加高考，并励志橙(x)为一名学霸，请出门右转，阅读橙橙的高考心得【那才是“学霸”的金玉良言 ~\",\"text\":\"神一般的高考 -- 没有（江苏）高考过的孩子建议直接读后半部分，不然你会被我这个“学葩”误导QAQ。 再来一段PS，如果你想参加高考，并励志橙(x)为一名学霸，请出门右转，阅读橙橙的高考心得【那才是“学霸”的金玉良言 ~ 高考前自从高三上学期期末考试彪过一次高分之后，高三下学期接下来的那些考试，我的排名都稳定在中等的位置。所以，我在临近高考的时候，也没有特别大的恐惧感【反正我不用和那些追逐名校的“学苣”抢一分两分】。我是一名典型的理科生，直白些，数学好，语文差，英语应试差，听口不错【打一顿】。但是，我在高考前的最后一星期并没有拼命刷我的薄弱项 – 语文，而是选择每天做一张或两张数学卷子。因为我当时是这么想的：语文成绩提升不是一天两天能搞定的，尤其是江苏语文卷，算得上是全国那几套试卷中，比较灵活的语文试卷，刷题毫无意义（对我个人而言，当然，我们班还有些恐怖的菊苣以刷题为乐，认为刷题可以放松身心，那就另当别论了 TAT）。而英语，江苏卷一向以“巨难”/“奇葩”/“虐人”/“脱离书本”为宗旨，你如果刷题，只会越刷越差，还不如多读写英文原著，找找语感，提升阅读速度（当然，例外们也不这么想）。于是，相比之下，倒是数学的刷题还是挺有意义的。在江苏读高中的人都知道，江苏高考数学的教学早在高二上学期就完结了（你会问：剩下的一年半呢？我会这样回答：1个月给小高考复习，17个月都是在重复劳动）而这个重复劳动并非“无用功”。最有说服力的例子就是，高二的数学竞赛菊苣，到了高三来，数学都及格不了（虽然他确实都会做，但就是没办法在考试的时候发挥好）。这是因为，江苏数学高考中，对考生的熟练度要求很高（喂！你为什么这么熟练啊！）因此，江苏高考能拿高分的，一般都不是那些思维灵活，智商超高的人，而是那些把每道题目都看熟，看到题号就知道这到题要写几行的刷题者 -&gt; 这也就是为什么在江苏，即便是数学天分极高的竞赛者，也要天天刷题。因此，虽然我是“纯”理科生，我还是认可，唯有高考前刷数学是最有价值的。 （参考一下，我就读的是苏州工业园区星海实验中学，这是一所好学校，本二率从没有下过98%，本一率也在省内遥遥领先。然而，这是一所“抓平均分”的学校，也就是说，我们的绝对高分几乎是没有的。而我校中等生的位置大约为省内排名前3000的位置） 嘛，当然，高考前还是有点紧张的，刷题效率下降是难免的，因此不用为自己的状态太过担心，照旧即可。 高考时讲真，总是有人在我耳边“骚扰”【因为我提前签约NYUSH A档】。说我压力不大，没他们幸苦，还给他们增加压力。但我以一个“过来人”的身份忠告所有人。高考时，这种“语言攻击”是不害人而害己的。首先，对方【如当时的我】根本没工夫，也没心情听你瞎抱怨，其次，你这样“蓄意”攻击，倒是会分散你自己的注意力，反倒消耗自己的精力。 另外，我要澄清一点，虽然我们A档狗表面上比那些追逐一分两分的人“压力小”。但这根本就是自欺欺人。高考/考试，一张试卷，你的状态/心理，是不可能只影响到一两道题目的，它会作为一个整体AOE，覆盖全卷。如果你状态好，那么整张卷子都会发挥得很正常或者很出色，如果你状态不好，那也不会只是一两道题目状态不好，同样也是整张试卷状态不好。因此，这种在考试前纠结“一分两分”的心态是不正确的。 最后，高考，考好自己就好，别人需要帮忙，帮他一把，不然，不要让琐事缠绕自己。高考不是全部（对一些人而言甚至连转折点都说不上），但是，对于身处这种制度下的我们，最要紧的，还是做好我们目前应该做的事。 高考后我属于“不对答案”党，今年高考结束后，直到填完志愿，我才秉着好奇的心态，对了对英语阅读理解的答案。（倒不是不敢对答案，而是。我觉得对不对答案区别不大，倒是对错还会吓到自己 QAQ。反正自交卷铃响的那一瞬间，大局已定，谁也改变不了了【什么？可以改变？不不不！我什么都不知道 QAQ】）高考过后，我的第一感觉是 —— 考得不错（打一顿），第二感觉是 —— 玩。 毕业典礼 是。 玩。 于是… 我被邀请参加毕业典礼的一个节目 —— 舞蹈 START！ DASH！ 我很喜欢 Lovelive 这没错，我很喜欢 μ’s 这也没错，我非常喜欢 果果 这更没错，但是居然让我跳果位，除了我这个主C外其他位都是女生，还说要我 穿！女！装！，这我是拒绝的！！iwi 喂喂喂！这种“万花丛中一点绿”的瞩目感已经超过舞蹈本身了啊！喂！ “没事，这只不过是我自己自作多情罢了，我又不学舞蹈，像我这种除了身材一无是处的人，怎么可能会成为观众的焦点。” 结果，我后悔我立了这个Flag，我一站到台上，就看到校长“憋不住”的笑脸，耳朵里全是尖叫和骚动声【完了，我嫁不出去了 QAQ】不过，幸好，在场的诸位都是垃圾三次元良民。最后的言论只停留在“我好帅”这里 （给我吊着打 TAT） 各种Siu与被Siu 想知道吗？不，我不写 ~~~ 计划旅行 我打算去日本自由行。自8年前那次跟团日本游之后，我打算自己去一次（当然，最后变成了基佬6人组）。一开始，我 Naive 地认为，这次旅行，人均6k就够啦！但是，没想到，日本物价/汇率犹如金涛拍岸之势，又犹大鹏展翅之迅猛，一下子让我这个懵懂的小萌新见识到了人间的险恶，现实的残酷。当我还在纠结全家3块2的饭团好还是3块3寿司好时，它们大手一挥 – 心狠手辣地在泡面下标价 350 日元（相当于23元RMB） （妈妈！这个价格我可以买坑德基套餐了啊！喂！） 于是，我们这个穷酸基佬组摇身一变变成了乞丐基佬组。机票，酒店都挑最便宜的定，交通 QAQ 一张7天 JR PASS 差点要了我的命 1900 RMB，天哪！！！ 这可是 3800 包辣条啊！有没有搞错！够我10年的伙食了！但我转念一想，日本辣条怎么可能只有5毛，于是我还是回过头抱住了 JR PASS 爸爸的裤腿。 接下来是酒店，东京，500RMB/人，大版，500RMB/人，名古屋，300RMB/人，箱根，箱根？？嗯？卧槽？啥？3000RMB/晚/人？还是最便宜的？妈妈，我能交大富翁纸币吗 TAT 就是这样，曾经6k元游日本的梦破碎了。原本留给CD/索尼/手办的4k拜倒在泥轰爸爸的脚下。 然后？ 除了和群里那群基佬开开玩笑，除了看书编曲。看！那是 Sbeam ！夏季特卖 ！然而，它悄悄地收起了鼓鼓的钱夹，跑了。 以上\",\"categories\":[{\"name\":\"这里是宇宙\",\"slug\":\"这里是宇宙\",\"permalink\":\"https://nekoyu.cc/categories/这里是宇宙/\"}],\"tags\":[{\"name\":\"高考\",\"slug\":\"高考\",\"permalink\":\"https://nekoyu.cc/tags/高考/\"},{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Lovelive\",\"slug\":\"Lovelive\",\"permalink\":\"https://nekoyu.cc/tags/Lovelive/\"},{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"泥轰\",\"slug\":\"泥轰\",\"permalink\":\"https://nekoyu.cc/tags/泥轰/\"}]},{\"title\":\"【PHP·Cloud9】给 Hostker 等虚拟主机套上 Laravel 框架\",\"slug\":\"laravel-install\",\"date\":\"un00fin00\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/laravel-install/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/laravel-install/\",\"excerpt\":\"PS：主机壳很萌，但也很麻烦 - TAT 不仅禁止了许多实用的函数，还关闭了SSH通道 安装 Laravel 正如伽利略曾说过 - 可爱的东西的背后都暗藏杀机【似乎没什么不对 先说说我和它的“邂逅”~ 上周，正当我沉浸在高考结束的喜悦中时，一位可爱的基友给我发了一条消息：“去试试 Symfony 吧。” 正当我想以“我要陪妹子玩，没时间…” 回绝他时，我灵机一动 - 他既然对把这个Symfony推荐给我，说不定这是一个可以令人“愉悦”的玩意儿 F/Z 梗 。（当时，无知的我还不知道这是一个PHP框架。）我想，Symfony？Symphony ？一定是那个英语不好的人起的名字。。于是，自然而然想到了“古怪英文”民族上去，再加上这个友人本来就挺污，我非常镇定地打开hacg.li，开始地毯式搜索：Symfony。 然而，这次那个可爱的基友居然趁我黄血没蓝的时候对准我狠狠地放了个大 —— Symfony 居然不是Galgame。我仰天长啸，故作镇定，似乎一切都在我的掌控之中地轻咳一声 – “咳咳，老夫早就料到了。”于是，以迅雷不及掩耳之势，跳转到谷歌，如果不是道行高深的老司机，绝对察觉不到我的异样。 … 好吧好吧，花絮结束，我们回到 Symfony\",\"text\":\"PS：主机壳很萌，但也很麻烦 - TAT 不仅禁止了许多实用的函数，还关闭了SSH通道 安装 Laravel 正如伽利略曾说过 - 可爱的东西的背后都暗藏杀机【似乎没什么不对 先说说我和它的“邂逅”~ 上周，正当我沉浸在高考结束的喜悦中时，一位可爱的基友给我发了一条消息：“去试试 Symfony 吧。” 正当我想以“我要陪妹子玩，没时间…” 回绝他时，我灵机一动 - 他既然对把这个Symfony推荐给我，说不定这是一个可以令人“愉悦”的玩意儿 F/Z 梗 。（当时，无知的我还不知道这是一个PHP框架。）我想，Symfony？Symphony ？一定是那个英语不好的人起的名字。。于是，自然而然想到了“古怪英文”民族上去，再加上这个友人本来就挺污，我非常镇定地打开hacg.li，开始地毯式搜索：Symfony。 然而，这次那个可爱的基友居然趁我黄血没蓝的时候对准我狠狠地放了个大 —— Symfony 居然不是Galgame。我仰天长啸，故作镇定，似乎一切都在我的掌控之中地轻咳一声 – “咳咳，老夫早就料到了。”于是，以迅雷不及掩耳之势，跳转到谷歌，如果不是道行高深的老司机，绝对察觉不到我的异样。 … 好吧好吧，花絮结束，我们回到 Symfony 在了解Symfony之后，觉得它不够炫，于是，随便点点就点到了 Laravel 上去。它的官网挺炫的，有点 Bootstrap 的风格。而 Laravel 与 Symfony 的关联就在于， Laravel 中使用到了Symfony的路由、数据库等功能。 然而，毕竟我主攻的是 Node.js ，PHP 程序写得很少，框架接触得更少，所以，我也不知道这个 Laravel 框架与其他框架对比有何优势，也不知道 Laravel 结合了 Symfony 究竟是强强联合还是画蛇添足。但至少，浏览一遍实例代码后，我觉得它还是挺有用的。 于是，就把它从 Composer 搬运了一下。 官网：http://www.golaravel.com/ 这里我推荐一个 Web IDE Cloud 9 【如果现在还没有注册账户，请先F墙，因为C9使用Google的Anti-Robot验证，因此不挂S或V#N无法通过认证】 C9 是一个完全免费（当然，土豪可以选择付费QAQ）。提供的虚拟机配置为 1 CPU / 1G RAM / 5G DDR3 Hard Drive。只开启（映射） 80 / 8080 少量端口。如果不使用超过24小时，会被自动休眠。 当然，这已经足够了。因为，我们只需要用它跑 composer. 建立一个新的IDE wget 下composer文件（你也可以从官网下载） 1wget https://nekoyu.cc/share/composer.phar 获取 Laravel 1php composer.phar require \\\"laravel/installer=~1.1\\\" 由 Laravel 可执行文件生成新的工程 1./vendor/bin/laravel new MyApp 这里等待的时间较长，如果感兴趣，可以研究一下 Laravel 的依赖包 ~ 最后，可以看到目录下已经生成了 MyApp 这个文件夹。里面就有初始化好的 Laravel 框架。 打包带走 1zip MyApp.zip ./MyApp/* -r C9 IDE给所有开发者提供了一个舒适的调试环境，你也可以直接在 C9 调试，调试结束再上传到自己的服务器。 然后，我生成的初始化框架项目：下载 使用 Laravel不写了 ~ 自己看模板 QAQ 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"PHP\",\"slug\":\"PHP\",\"permalink\":\"https://nekoyu.cc/tags/PHP/\"}]},{\"title\":\"【Node.js】在VPS上使用Node.js为Google做反向代理\",\"slug\":\"node-proxy\",\"date\":\"un22fin22\",\"updated\":\"un33fin33\",\"comments\":true,\"path\":\"articles/node-proxy/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/node-proxy/\",\"excerpt\":\"之前曾经写过这样一篇文章【周记】在VPS上搭建Nginx并为Google做反向代理。当时，我也尝试过使用Nodejs做反向代理。但是因为那时候快要高考，时间比较紧，没时间去研究NodeProxy回复的404的错误，因此，就暂时放弃了用Nodejs做反向代理。 现在，在不断改善Slink的过程中，我发现了对那时候的“坑”的解决办法。\",\"text\":\"之前曾经写过这样一篇文章【周记】在VPS上搭建Nginx并为Google做反向代理。当时，我也尝试过使用Nodejs做反向代理。但是因为那时候快要高考，时间比较紧，没时间去研究NodeProxy回复的404的错误，因此，就暂时放弃了用Nodejs做反向代理。 现在，在不断改善Slink的过程中，我发现了对那时候的“坑”的解决办法。 开发，查错，是非常宝贵的经验，所以，我会把我解决问题的经历分享出来。但如果不想看窝的废话，请直接（QAQ）： Nodejs安装 代码处 找到问题噜！其实，404错误的原因很简单，只要仔细分析，就能立刻发现问题。 404，单纯的文件没找到，意味着我们代理的 https://google.com/ 下面没有index文件！（或者没有路由） 这我十分疑惑！google.com 下面怎么可能没有页面？ 没想到的是，这次，百度居然帮了我大忙 0.0 （该感谢的时候还是要感谢一下的）【感谢百度让我用上了谷歌~~~QwQ】。。 有一次，我习惯性地在URL栏中输入了baidu.com，结果，发现，baidu.com居然跳转到了www.baidu.com。这点醒了我，百度一向喜欢模仿google，说不定这也是从google那里学来的——于是，我侥幸尝试了一下，在反代地址中输入https://www.google.com(.hk)/ ~ 然后0.0就成功了（喂喂！不成功哪来的这篇文章！） 但是，刨根总得问到底，于是，我对google.com进行了curl 1curl google.com 结果如下 为了美观，我对返回的数据进行了排版缩进 1234567891011&lt;HTML&gt; &lt;HEAD&gt; &lt;meta http-equiv=\\\"content-type\\\" content=\\\"text/html;charset=utf-8\\\"&gt; &lt;TITLE&gt;302 Moved&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;H1&gt;302 Moved&lt;/H1&gt; The document has moved &lt;A HREF=\\\"http://www.google.com.hk/?gfe_rd=cr&amp;amp;ei=a_pfV8-bEY7M8ge4n7TQDg\\\"&gt;here&lt;/A&gt;. &lt;/BODY&gt;&lt;/HTML&gt; 果然是一个302重定向，而NodejsProxy在Get的时候，无视了前段路由的302重定向信息，结果就把上面的页面返回了出来。于是乎，就出现了上次的错误。 ！好了 0.0 废话到此结束，下面就是正片了！ 从0开始搭建自己的反代服务器（包括Google） 安装NodejsWindows比较简单，无脑exe，结束。 Linux也简单，无脑apt-get或者yum。但是，有的时候我们想安装特定版本（比方说为了使用Ghost服务）【Ghost就是矫情QAQ，还指定开发版本】，我们就必须安装特定的Node版本。 反正这次说Nodejs，我干脆连安装步骤也一块儿说了。~~ Windows无脑安装包。没别的 Linux/Unix安装Git （什么？你不知道什么是Git？请出门右转自行Google） 12345#Debain/Ubuntuapt-get update &amp;&amp; apt-get install -y git#centos/...yum update &amp;&amp; yum install -y git Clone Node项目 1git clone https://github.com/nodejs/node.git ./node Clone速度基本上取决于你的网速 然后，切换版本（我推荐v0.10的最新版，目前是v0.10.40） 12cd nodegit checkout v0.10.40-release 安装Node.js（安装之前自行下载make,g++等编译工具（坑爹的野草vps就没有内置g++【可怕0.0】），方法同git，不知道什么是make？你还是安装bin吧QAQ） 再给一个小Tips（make时间可能会很长，建议在screen命令下运行，以免因为连接问题发生奇怪的事情，0.0这里我就不讲screen怎么用了0.0自行右转谷歌） 123./configuremakemake install 至此，安装结束，你可以通过以下两个命令检查安装 12node -vnpm -v 如果找不到文件，你可以自行添加环境变量（0.10.40改为你刚刚编译的Node的版本号） 12export NODE_HOME=/usr/local/node/0.10.40export PATH=$NODE_HOME/bin:$PATH 建立proxy 当然，你可以选择我的 Slink 现在还有些Bug，不过你可以研究一下反代源码 首先，新建项目（目录名字为NodeProxy，你也可以自己更改nya~） 123mkdir NodeProxycd NodeProxynpm init 在 name:(NodeProxy) 后面输入项目名字【这里就默认文件夹名字——NodeProxy】，回车 在 version:(1.0.0) 后面输入项目版本号【这里就不变了，直接回车】 description: 对项目的描述，直接回车~ entry point: (index.js) 默认启动的js文件（相当于index.html/php之类的）【这里也不变了】 test command: 测试指令 无视，回车 git repository: 项目更新的repo地址 无视，回车 keywords: 项目的关键词（便于你把应用发布到npm之后，让人能更方便地找到），过，回车 author: 写上你的大名！【我就写Hibiki了】 license: 随便你MIT、GPL还是Apache，反正现在是测试，所以，无视，回车 这就是npm帮我们生成的package.json文件： 1234567891011&#123; \\\"name\\\": \\\"NodeProxy\\\", \\\"version\\\": \\\"1.0.0\\\", \\\"description\\\": \\\"\\\", \\\"main\\\": \\\"index.js\\\", \\\"scripts\\\": &#123; \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" &amp;&amp; exit 1\\\" &#125;, \\\"author\\\": \\\"Hibiki\\\", \\\"license\\\": \\\"ISC\\\"&#125; yes就行~ 回车~ 然后，安装http-proxy组件 1npm install --save http-proxy 安装完后 123vim index.js# 这就是之前entry point的文件名，如果你不是index.js，请编辑entry point的文件名# 但其实这影响不大，你可以通过其他方式启动 按 i 建，进入编辑（插入）模式键入以下内容： 1234567891011121314var http = require(\\\"http\\\");var httpProxy = require('http-proxy');var proxy = httpProxy.createProxyServer(&#123; ignorePath: false, changeOrigin: true, prependPath: false &#125;);proxy.on('error', function (err, req, res) &#123;&#125;);http.createServer(function (req, res) &#123; proxy.web(req, res, &#123;target: \\\"https://www.google.com.hk\\\" + req.url&#125;);&#125;).listen(80); 如果你的服务器在美国，那么请直接target到https://www.google.com。 按 Esc ，输入 :wq 保存文件，启动程序（后面的index改为你自己的entry point接入名） 1node index 至此 反向代理结束你们可以访问一下我临时搭建的反代服务器：http://server.nekoyu.cc/ 以上~\",\"categories\":[{\"name\":\"nodejs大坑好\",\"slug\":\"nodejs大坑好\",\"permalink\":\"https://nekoyu.cc/categories/nodejs大坑好/\"},{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"nodejs大坑好/我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/nodejs大坑好/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Nodejs\",\"slug\":\"Nodejs\",\"permalink\":\"https://nekoyu.cc/tags/Nodejs/\"},{\"name\":\"VPS\",\"slug\":\"VPS\",\"permalink\":\"https://nekoyu.cc/tags/VPS/\"}]},{\"title\":\"【Disqus】通过API获取某篇文章的评论数和推荐数\",\"slug\":\"disqus-comments\",\"date\":\"un55fin55\",\"updated\":\"un55fin55\",\"comments\":true,\"path\":\"articles/disqus-comments/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/disqus-comments/\",\"excerpt\":\"Disqus 评论系统，知名的有两个，多说和Disqus。国内的多说就不多说了，因为某些原因，我拒绝使用多说。因此，我就选择了Disqus。 Disqus有很多优点，最主要的优点是它不需要后台支持，你可以将它运行在静态网页上。就像这个Blog的评论系统就是使用的Disqus。 不过！我写这篇文章的目的是来细数Disqus的缺陷的！ 因为评论端和博客端分开，导致诸多问题。其中之一就是评论与文章的对应问题。Disqus机（TOU）智（LAN）地使用了URL网址认证机制【其实，id这种东西更好吧喂！】。那么，问题就来了——如果你想要获取某一篇文章的评论，你就必须得知道它的URL地址。 这种机制非常不方便。打个比方，你希望获取文章的评论数，那么你就得遍历所有文章，获取所有文章URL，然后再ajax给disqus.com，获取json数据，最后再用DOM操作更新页面。延迟问题且不去说它，光是一篇一篇ajax就非常麻烦了。 于是乎，Disqus官方给出了一个api，专门用于解决获取评论数的问题。 本Blog中的嵌入代码如下：\",\"text\":\"Disqus 评论系统，知名的有两个，多说和Disqus。国内的多说就不多说了，因为某些原因，我拒绝使用多说。因此，我就选择了Disqus。 Disqus有很多优点，最主要的优点是它不需要后台支持，你可以将它运行在静态网页上。就像这个Blog的评论系统就是使用的Disqus。 不过！我写这篇文章的目的是来细数Disqus的缺陷的！ 因为评论端和博客端分开，导致诸多问题。其中之一就是评论与文章的对应问题。Disqus机（TOU）智（LAN）地使用了URL网址认证机制【其实，id这种东西更好吧喂！】。那么，问题就来了——如果你想要获取某一篇文章的评论，你就必须得知道它的URL地址。 这种机制非常不方便。打个比方，你希望获取文章的评论数，那么你就得遍历所有文章，获取所有文章URL，然后再ajax给disqus.com，获取json数据，最后再用DOM操作更新页面。延迟问题且不去说它，光是一篇一篇ajax就非常麻烦了。 于是乎，Disqus官方给出了一个api，专门用于解决获取评论数的问题。 本Blog中的嵌入代码如下： 1234567891011var disqus_shortname = 'XXXXX';// Your Shortname (function() &#123;var dsq = document.createElement('script');dsq.type = 'text/javascript';dsq.async = true;dsq.src = '//' + disqus_shortname + '.disqus.com/count.js';(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);&#125;)();// Create Ajax Script 大概的意思我解释一下：（如果你想自己研究也可以，总之这种API调用方法虽然奇怪，但是也是很常见的-&gt;主要是因为它兼容性最好） 首先，在head中（head不存在就在body中）创建一个新的script标签，并把 http(s)://XXXXX.disqus.com/count.js 引用进去。（XXXXX为你的Disqus Forum短名） 然后，浏览器会自动获取count.js（这是一个被压缩过的js，它的功能是批量获取URL地址的评论数【内含一个跨域ajax】） 自动执行count.js 再插入一个javascript，这个js中包含一个回掉信息，回掉的数据就是请求的所有文章的评论数 接下来，count.js 会通过getElementByTag(a) getElementByClassName(“article-comment-link”)【这个或许有不同】，并通过 data-disqus-url【也可能有不同】中的URL与回掉的URL匹配来获取对应文章的评论数。 是不是！超！烦！ 而且，你会发现，这个功能不是特别完善。 在Disqus中，有一个Recommend功能，【类似于微博中的赞？-&gt;虽然超讨厌“赞”这种说法】，但是Disqus并没有提供类似与获取评论数那样的获取推荐数的功能。肿么办呢？ 这时候就要用到Disqus API。Disqus API分公有和私有两种，它们的权限不同，但都有请求数限制。为了保护自己的公钥和私钥，響喵建议还是用PHP程序保护一下（直接插在页面里面真的不安全） Disqus有非常丰富的API，访问也非常快（比加载评论框快不知道多少倍QAQ）。你甚至可以用Disqus搭建一个论坛（吼吼吼，毕竟人家也把短名叫成Forum嘛！） 废话不多说了，贴代码（你也可以将它改成纯javascript），因为懒得用原生Request，我直接用了jquery，别打我 1234567891011121314151617181920var urlArray = [];$('.disqus-comment-count').each(function () &#123;var url = $(this).attr('data-disqus-url');urlArray.push('link:' + url);&#125;);$.ajax(&#123;type: 'GET',url: \\\"https://nekoyu.cc/disqus_addons.php\\\",data: &#123; shortname: \\\"shirokyu\\\", data : urlArray &#125;, cache: false,dataType: \\\"jsonp\\\",success: function (result) &#123; console.log(\\\"N.Hibiki Disqus Plugin Working...\\\"); for (var i in result) &#123; var count = result[i].likes; $('.disqus-comment-like[like-url=\\\"' + result[i].link + '#like\\\"]').html(count + \\\" Likes\\\"); &#125; console.log(\\\"N.Hibiki Disqus Plugin Complete!\\\");&#125;&#125;); 前端很简单，访问后端PHP【因为ajax，跨域也没问题】，把文章链接压进一个数组，并传递shortname收到get回复后，javascript会找到所有带有Class：disqus-comment-like的标签，并且用like-url匹配url，来匹配文章，以获取Recommend数。 后台如下（原谅我隐藏了密钥，如果懒得自己搭后台，可以直接用上面的代码访问我的API就行了【不要把我的月请求数用光就行QAQ】）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?php define(APIKEY,\\\"XXXXX\\\"); function object_array($array)&#123; if(is_object($array))&#123; $array = (array)$array; &#125; if(is_array($array))&#123; foreach($array as $key=&gt;$value)&#123; $array[$key] = object_array($value); &#125; &#125; return $array; &#125; //将ClassObject转换为Object【源码来自Google】 function getweb($url ,$refer) &#123; $header[] = \\\"Cookie: \\\" . \\\";\\\"; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HTTPHEADER, $header); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_BINARYTRANSFER, true); curl_setopt($ch, CURLOPT_REFERER, $refer); $output = curl_exec($ch); curl_close($ch); return $output; &#125; //Get请求【源码来自一年前的窝写的Q.FM Portable】 $s = $_GET[\\\"shortname\\\"]; $d = $_GET[\\\"data\\\"]; $p = \\\"\\\"; for ($i = 0;$i &lt; count($d);$i++) &#123; $p = $p.(\\\"&amp;thread[]=\\\".urldecode($d[$i])); &#125; $data = getweb(\\\"https://disqus.com/api/3.0/threads/set.json?api_key=\\\".APIKEY.\\\"&amp;forum=\\\".$s.$p,\\\"\\\"); $datar = json_decode($data,1); $back = []; foreach ($datar[\\\"response\\\"] as $qt)&#123; $q = object_array($qt); $t[\\\"link\\\"] = $q[\\\"link\\\"]; $t[\\\"likes\\\"] = $q[\\\"likes\\\"]; $t[\\\"comments\\\"] = $q[\\\"posts\\\"]; $back[] = $t; &#125; echo $_GET['callback'].'('.json_encode($back).')';?&gt; 吼啦！这样就大功告成了！ 详情就见我的博客吧，主页已经能显示Like数啦！ 【庆贺昨天高考顺利结束！】 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"Disqus\",\"slug\":\"Disqus\",\"permalink\":\"https://nekoyu.cc/tags/Disqus/\"},{\"name\":\"PHP\",\"slug\":\"PHP\",\"permalink\":\"https://nekoyu.cc/tags/PHP/\"}]},{\"title\":\"【PHP】在虚拟主机上完美运行Flarum0.1.0-Beta5\",\"slug\":\"flarum-install\",\"date\":\"un11fin11\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/flarum-install/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/flarum-install/\",\"excerpt\":\"我们先认识一下Flarum 首先，它是一个Material Design的PHP论坛项目。 你可以到我已经建设完成的网站上去看一看，我保证你会一下子爱上它~https://hibiki.pw/Forum/ 如果链接失效点这里 广告：它搭建在主机壳(Qiao)上，主机壳(Qiao)是萌萌的虚拟主机娘 ~~ 目前因为.htaccess文件与Flarum主程序切合太密，使用https重写后，程序直接找不到文件，因此这个坑以后再说。 怎么样！是不是非常美观！\",\"text\":\"我们先认识一下Flarum 首先，它是一个Material Design的PHP论坛项目。 你可以到我已经建设完成的网站上去看一看，我保证你会一下子爱上它~https://hibiki.pw/Forum/ 如果链接失效点这里 广告：它搭建在主机壳(Qiao)上，主机壳(Qiao)是萌萌的虚拟主机娘 ~~ 目前因为.htaccess文件与Flarum主程序切合太密，使用https重写后，程序直接找不到文件，因此这个坑以后再说。 怎么样！是不是非常美观！ 官网：http://flarum.org/ 我第一次见到它时，因为其外观与Ghost默认主题极其相似、以及网页ajax的流畅性，甚至使我产生了“这一定是Node.js的程序”的错觉。后来经过几周的Google，才找到这个开源软件——居然是PHP的！！【喵真的是下了一大跳呢QAQ 于是，我就直接找到官网，准备在Hostker（主机壳(Qiao)）上搭建这个论坛。 但点开了安装过程后，却被告知，必须有SSH的主机才能安装Flarum！ 没天理啊！！ 据我所知，PHP是不需要，也是不可能像Nodejs一样长时间运行的（它从来都是执行短进程命令）。 完整阅读安装步骤之后，我发现了SSH的真实用途——它只是用来通过Composer获取依赖库。Flarum完完全全还是靠Apache(或其他)/PHP来执行的。 因此，官网上说的“没有SSH的主机不能安装”完全是错误的。 下面我就来讲如何在普通虚拟主机中使用Flarum 安装先找一个可以执行bash命令的电脑（系统随意，服务器也行） 先下载官方的Composer 执行命令安装Flarum 我选择的是测试版Beta（迄今为止是Beta5） 1composer create-project flarum/flarum ./flarum --stability=beta 如果希望把Flarum用在生产环境中可以选择正式版0.1.0 1composer create-project flarum/flarum ./flarum 这样你就获取了Flarum的程序包。 下面只要将它拷贝到PHP虚拟主机上就结束了。打包命令可以参考 1234zip 文件名.zip flarum//zip压缩tar -zcvf flarum flarum.tar.gz//gz压缩 接下来就可以像安装Wordpress一样安装Flarum了。 另外，如果你不是Hostker用户，或者你不用Beta就不需要往下看了。 特定Bug修复 针对Hostker禁止DirectoryIterator的解决方法 进入 {你的flarum地址}/vendor/flarum/core/src/Event/ 找到 ConfigureLocales.php 编辑文件 直接跳转到第66行（不同版本不太一样？） 总之找到如下位置 123foreach (new DirectoryIterator($localeDir) as $file) &#123; ...&#125; 把这一段改为 1234foreach (glob($localeDir.\\\"/*\\\") as $file) &#123; if (!is_dir($file) &amp;&amp; in_array(substr(strrchr($file, '.'), 1), ['yml', 'yaml'])) &#123; $this-&gt;locales-&gt;addTranslations($locale, $file); &#125; 保存 这样，Hostker就不会报错了。 针对Beta中主页文字都是函数名而不是单词的解决方法 浏览器打开 {你的flarum地址}/admin#/extensions 登陆后把 Emoji v0.1.0-beta.5 的插件取消掉，保存即可 好了，现在你已经解决了所以问题，好好享受吧！ 另如果你暂时没办法用Composer下载Flarum，你可以用我打包好的Flarum Beta5（zip包）。若出现问题请按照以上的步骤修复 https://nekoyu.cc/share/flarum.zip 以上 【高考前最后一Post——这真的是要作死啊2333】\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"PHP\",\"slug\":\"PHP\",\"permalink\":\"https://nekoyu.cc/tags/PHP/\"}]},{\"title\":\"【Docker】初试Docker 自定义Dockerfile 配上最近写的Slink\",\"slug\":\"try-docker\",\"date\":\"un00fin00\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/try-docker/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/try-docker/\",\"excerpt\":\"首先，这篇文章会很长…… Docker Docker这个玩意儿已经出来了一年多，然而因为我之前主攻的是Native（Android）与网页后端（PHP、Node.js），因此，我只是把Docker归为虚拟机的一类，没有去深入研究。 现在，受姬(基)友的影响，我开始关注互联网。从虚拟主机【包括，虽不限于，但主要是Hostker】（奇怪的表达方式），到云服务器【我也有过大力克金的时期…不堪回首啊QAQ】，再到VPS主机。而我遇到的第四个“玩具”就是Docker。 Docker的介绍与原理自己Google。但有一点必须要知道——Docker虽然也是虚拟化环境，但是因为其拥有优化过的独立内核，因此比虚拟机虚拟出来的VPS效率高很多。但是因为Docker服务的特征【也就是对环境的封装】，它默认是不能存储长期数据的。因此，它终究是没有办法撼动VPS的地位，只能在某些服务中——比如集群、小范围数据迁移（依靠Volume迁移）——等，拥有自己的优势。 下面说说我走过的“弯”路。\",\"text\":\"首先，这篇文章会很长…… Docker Docker这个玩意儿已经出来了一年多，然而因为我之前主攻的是Native（Android）与网页后端（PHP、Node.js），因此，我只是把Docker归为虚拟机的一类，没有去深入研究。 现在，受姬(基)友的影响，我开始关注互联网。从虚拟主机【包括，虽不限于，但主要是Hostker】（奇怪的表达方式），到云服务器【我也有过大力克金的时期…不堪回首啊QAQ】，再到VPS主机。而我遇到的第四个“玩具”就是Docker。 Docker的介绍与原理自己Google。但有一点必须要知道——Docker虽然也是虚拟化环境，但是因为其拥有优化过的独立内核，因此比虚拟机虚拟出来的VPS效率高很多。但是因为Docker服务的特征【也就是对环境的封装】，它默认是不能存储长期数据的。因此，它终究是没有办法撼动VPS的地位，只能在某些服务中——比如集群、小范围数据迁移（依靠Volume迁移）——等，拥有自己的优势。 下面说说我走过的“弯”路。 Docker 服务的选择 因为国内Docker服务还没有被商业气息完全侵染，因此，如果不是需要部署特别重要的个人数据，我还是建议使用国内的Docker服务。毕竟Docker的部署和抽取需要大量的带宽，用国外的服务没有多大必要。 那么，我们就来看看国内的那些Dockers。 Alauda 灵雀云 天哪！它不免费了 QAQ –2016/06/01 我使用的第一个Docker服务就是Alauda提供的，国内服务，或者，国外服务。同样需要强调的一点是，如果只是想尝尝鲜，建议国内服务。【国内提供每月29元的优惠券，无门槛，只要绑定微信即可（用阿里小号直接申请一个零时微信，虽然极端地不厚道。。），充值支持Alipay。国外没有优惠，而且只支持Paypal、和XX忘记了，反正我没听说过】 毕竟第一次接触Docker，我直接选取了公共镜像Centos6。接下来Docker的表现使我震惊——我原以为它部署要花很长时间【毕竟是一个操作系统啊喂！而且镜像源地址还在美国…后来才知道Docker里也有一种东西叫Cache…】。Alauda有一点非常厚道——绑定或映射端口的数量没有限制。 远程ssh登陆以后，总算又一次体验到了飞一样的感觉——反应“几乎”没有延迟。ping一下，delay在50ms以内。 但是，好景不长。用来半天后，我发现Alauda居然不支持Volume！ Alauda居然不支持Volume！ Alauda居然不支持Volume！ 而且！它会频繁地抽取镜像重新部署——部署时间有一次居然卡到了5个小时（由此我深度怀疑Alauda是不是没有用集群服务器，而是用一个任务优先队列来敷衍“Free Tester”）。 直到更新文章的今天(06/01)它的构建服务还是时好时坏。。开来Alauda真得好好反思一下了QwQ 既然它不友好，那我就没有必要在它上面克金~ 走人~ QAQ DaoCloud 这个名字好奇葩——这是我的第一反应，也是我现在写下这篇文章时，挥之不去的“懵觉”。 它的优惠额度是2x（??? 大概类似于2格气？或者两滴血？不知道。。总之挺可爱的QAQ） 对于这两格气，你可以放两次小招（128MB,1共享CPU），也可以放一个大招（256MB,1共享CPU）【配置上似乎没有Alauda大方】（PS一下，气的价格似乎是10元/气·月，绑定微信可以+1气，点击充值【纵使你不充】，在下方可以直接领到38现金券！！） 抱着一丝希望，试了它提供的服务——直接打了Alauda的脸。 虽然有些实用的服务需要收费（无法用气）比如，控制台（包括ssh通道）。但是，它提供免费的Volume！！！ 它提供免费的Volume！！！ 它提供免费的Volume！！！ 一个气 == 10GB SSD Volume 【太帅了！ 另外！！DaoCloud还支持在线调试Dockerfile——简直是新人的福音啊！！！ 而且，DaoCloud完成了与Coding的无缝对接（安利一下，Coding约等于中国的Github，如果不是特别重要的资料，可以放Coding，毕竟国内速度快），支持WebHook，可以直接调Coding和Github上最新的tag或者push。这点很方便——可以省去我们不少时间。构建速度也非常快——我的自己写的Slink服务直需要20s就可以在非cache下完成构建（里面还有非常费时的curl/nodejs安装/npm install等过程），因此，可以说，DaoCloud才是真正颠覆了我对Docker的认识。 接下来，就是网络速度。 DaoCloud有一个非常神奇的功能——支持免备案域名绑定——也就是说，DaoCloud有海外服务器。我侥幸试了一试，没想到Delay居然在40ms 。。。 天哪。。。向橙橙询问以后，得出的结论是——它的服务器应该是在香港。【这也很不错了好嘛！喂！】 于是，就目前来看，我对DaoCloud是路转粉了QwQ希望它可以坚持当下的User-Friendly Docker 使用dockerfile创建自己的docker image 为了试试DaoCloud的稳定性，我干脆把最近用node.js写的Slink，推到了Github，并适配到Docker中。 什么是Slink？一个“比较”美观（全Bootstrap实现）的短链接生成服务器【现在短链反代Short Reverse Proxy功能还在测试，因此没有推到Github上。具体实现大概要高考后了】 测试地址（感谢DaoCloud）http://喵.cc/ 请勿滥用 比如本站短链为 http://喵.cc/eoiF Slink的代码简介和开发日志以后再写吧（不然这篇文章没底了233） 首先，新建，并clone，下自己的空repo（github与coding均可） 在终端： 1touch Dockerfile 创建一个Dockerfile 键入以下内容 首先 调用底包 1FROM daocloud.io/library/centos:centos7 当然，你也可以使用centos5/6 ubuntu12/13/14等，甚至可以直接使用人家打包好的Nodejs/OpenVPN/Nginx等等，这取决于你自己。【这里我采用了daocloud源上的Centos】 下面是声明作者信息（名字和邮箱） 1MAINTAINER NHibiki &lt;i@nekoyu.cc&gt; 这就不用我多解释了 然后就是正文 1RUN 这个指令用于执行 bash -c 命令 1WORKDIR 这个指令用于确认工作目录（比如你执行WORKDIR /usr，那么每次你启动镜像，你的默认登陆地址就是 /usr） 12COPYADD 这两个命令都可以把image里的文件抽取到构建的系统中 1EXPOSE 这个指令用暴露docker中的端口，使用户可以从外部访问 1CMD 这个命令用于指定启动时的指令（似乎还有另外一个更特殊的？我忘记了。。） 完整的源码就如下了： 12345678910111213141516171819FROM daocloud.io/library/centos:centos7MAINTAINER NHibiki &lt;i@nekoyu.cc&gt;# Install git &amp; nodejsRUN yum update &amp;&amp; yum install git -y &amp;&amp; yum install curl -yRUN curl --silent --location https://rpm.nodesource.com/setup | bash -RUN yum install nodejs -y# Clone The Latest SlinkRUN git clone https://github.com/NHibiki/slink.git /usr/src/slinkWORKDIR /usr/src/slinkCOPY run.sh /usr/src/slink/RUN chmod +x run.shRUN npm installEXPOSE 80CMD [\\\"./run.sh\\\"] 你们可以参照我的项目，也可以直接clone下来，反正MIT…（Github的MIT协议我几天后会加） https://github.com/NHibiki/docker-nodejs-slink 好啦好啦。。不写了~ 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"Docker\",\"slug\":\"Docker\",\"permalink\":\"https://nekoyu.cc/tags/Docker/\"}]},{\"title\":\"【博客搬家】反正就是不停地折腾\",\"slug\":\"hello-hexo\",\"date\":\"un55fin55\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/hello-hexo/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/hello-hexo/\",\"excerpt\":\"搬家啦！标题要写得大一些博客是一个非常神奇的东西。虽然，在我看来，它与日记没有特别大的不同（诶 (～￣▽￣)→大概因为我总在日记里写技术文章吧，哈哈）而博客与日记最大的区别在于，博客上的东西可以被所有人看到，而日记是一种比较私密的记录方式。 因此，我选择博客并不在乎它有多少便捷的功能，而在于它的展示潜力（当然还有折腾系数…这就不谈了） 以下，就是我曾经“折腾过”的博客（包括但不限于）： Wordpress 最早的博客 Typecho 因为Wordpress太重而更换的博客 Sina Blog 中间有一段时间突然不想自己维护网站，就采用了新浪博客 Wordpress.org 因为挂上了SSL，国内还是可以正常访问，但是速度不敢恭维 Ghost 这是去年因为开始接触Node.js才知道的博客，没有正式使用，只是玩玩而已 【My1ink】 自己用Node.js开发的博客（或者说微博系统？）还在测试阶段 【Hexo】 这就是我现在正在使用的博客。正如你所见，它是静态的 下面我来谈谈我对这些博客的看法（新浪就不谈了）\",\"text\":\"搬家啦！标题要写得大一些博客是一个非常神奇的东西。虽然，在我看来，它与日记没有特别大的不同（诶 (～￣▽￣)→大概因为我总在日记里写技术文章吧，哈哈）而博客与日记最大的区别在于，博客上的东西可以被所有人看到，而日记是一种比较私密的记录方式。 因此，我选择博客并不在乎它有多少便捷的功能，而在于它的展示潜力（当然还有折腾系数…这就不谈了） 以下，就是我曾经“折腾过”的博客（包括但不限于）： Wordpress 最早的博客 Typecho 因为Wordpress太重而更换的博客 Sina Blog 中间有一段时间突然不想自己维护网站，就采用了新浪博客 Wordpress.org 因为挂上了SSL，国内还是可以正常访问，但是速度不敢恭维 Ghost 这是去年因为开始接触Node.js才知道的博客，没有正式使用，只是玩玩而已 【My1ink】 自己用Node.js开发的博客（或者说微博系统？）还在测试阶段 【Hexo】 这就是我现在正在使用的博客。正如你所见，它是静态的 下面我来谈谈我对这些博客的看法（新浪就不谈了） 在我还是初中生的时候，Wordpress确实是一款非常好的博客系统，然而，现在的Wordpress在我的眼里已经完完全全沦为了一个CMS系统——它的插件商店与主题自由致使致一不留神就会地把它变成一个标准CMS。这也就是为什么我抛弃了它。 Typecho是一款轻量级博客。然而，它虽然轻，但是有许多优化不到位的地方——有的时候甚至会莫名其妙卡PHP（当然，这里说的Tco是1年前的Tco，至于它现在的表现如何，我也没有亲自尝试过【不过从橙橙的部落格看，似乎已经有了很大的改善】）。还是拿我曾经接触过的Tco说，虽然它的“优化不到位”所消耗的时间与冗杂的Wp相比根本不算什么，但是我还是无法说服自己使用它~ Ghost是个非常不错的博客。唯一的不足！对！唯一的不足——它需要Node.js作为后台支持。而对于我这种总是要4核全开编译Android内核的人来说，实在是力不从心了——因为我无法保证Node线程稳定运行（相较之下，PHP由于它的短暂执行方式，基本与多核编译这种高“能耗”工作不冲突） 另：Markdown真是一个杰作！ 最后就是今天的主角【Hexo】 Hexo虽然也是基于Node.js，但它的发布方式与Ghost不同——Ghost是动态Blog——整个构架依赖于Node线程。路由解析、网页渲染、数据传输全由Node处理（天哪~~~）。而Hexo采用静态生成全站的方式，并且结合了git deploy的功能，所以发布还是没有想象中的那么麻烦（当然，Git的deploy现在只支持Github、Gitcafe（大概被Coding吞了之后就不支持了吧））。我因为偷懒，自己写了一个Hostker Git上传脚本，插件什么的，还是高考完再看情况吧【打~】——因此，这些原因促使Hexo既轻便、又省力（这里的省力指的是维护上的省力【毕竟搭建这么一个Hexo并不容易、、】，因为完全静态，你不需要特别关注PHP漏洞、Apache漏洞这类消息了） 最后，讲一下它的部署方法：【我只说Windows下的Hexo 3.x了，Linux太方便（其实一样？）】 首先你要有Node.js（安装自行Google） 打开终端（一定要是git bash终端）【不知道神马玩意儿的请补一下git的相关知识。。】 1. npm install hexo-cli -g 2. hexo init MyBlog 3. cd MyBlog 4. npm install //这个可有可无，经本喵验证，第2步时Hexo已经自动下载好依赖了 5. npm install hexo-server --save //安装本地网页管理器【这样你就可以用Ghost的方式创作了】 6. hexo server //执行之后，浏览器打开 http://localhost:4000/ 开始写作吧！ 写完之后，请回到终端Ctrl+x终止server 7. hexo g //渲染并生成网页【网页相关设置请自行修改_config.yml】 8. hexo d //自动部署到git【发布之前请确认ssh通道已经打开，并认证】 至此，你已经完成了你的网页部署。 【最后一件事！Hexo是使用Markdown完成文章编辑的！在尝试前请确定你会Markdown！】 以上\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Net\",\"slug\":\"Net\",\"permalink\":\"https://nekoyu.cc/tags/Net/\"},{\"name\":\"白\",\"slug\":\"白\",\"permalink\":\"https://nekoyu.cc/tags/白/\"},{\"name\":\"Hexo\",\"slug\":\"Hexo\",\"permalink\":\"https://nekoyu.cc/tags/Hexo/\"}]},{\"title\":\"【又一坑】Biu.Moe Android Native开发\",\"slug\":\"biu-moe-android\",\"date\":\"un00fin00\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/biu-moe-android/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/biu-moe-android/\",\"excerpt\":\"虽然明白一个人开发一个完整的Android播放器是一个作死行为——尤其在我还有辣么多坑没有填的情况下（外加手残型设计） 但其实我还是挺有自信的…毕竟半年前我也亲手开发了Q.FM AndroidNative 版本。虽然因为播放器定位不同，无法移植代码，但在思路上还是相近的，因此独自开发一个播放器理应不难。\",\"text\":\"虽然明白一个人开发一个完整的Android播放器是一个作死行为——尤其在我还有辣么多坑没有填的情况下（外加手残型设计） 但其实我还是挺有自信的…毕竟半年前我也亲手开发了Q.FM AndroidNative 版本。虽然因为播放器定位不同，无法移植代码，但在思路上还是相近的，因此独自开发一个播放器理应不难。 （开坑容易填坑难——本地化应用正好相反——写了2天数据结构【嗯！好歹我也是信息竞赛江苏省一啊喂！】头都大了。为了效率，重建了堆栈列表、堆排、自己写了歌单类、用户类、下载队列、网络请求线程继承………虽然重头戏都结束了……但是却意外心累——因为75%的完成进度代表它现在只能登陆Biu……（播放、UI一点都没动…… 另。新喵在我的雄威（死缠烂打）下屈服了，总算给了我Biu的大部分API这才使得至少可以完成登录事项……至于列表更新,播放等等，估计要下周末了。 赶作业啊！赶作业【嘛，其实作业已经做完了，但要刷题啊！！！不刷又要被班上的学霸们甩了…… &nbsp; &nbsp;\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"Android\",\"slug\":\"Android\",\"permalink\":\"https://nekoyu.cc/tags/Android/\"},{\"name\":\"Biu\",\"slug\":\"Biu\",\"permalink\":\"https://nekoyu.cc/tags/Biu/\"},{\"name\":\"Music\",\"slug\":\"Music\",\"permalink\":\"https://nekoyu.cc/tags/Music/\"}]},{\"title\":\"【CSS3脚本自适应插件】一个脚本解决所有问题\",\"slug\":\"csssuperfitter\",\"date\":\"un00fin00\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/csssuperfitter/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/csssuperfitter/\",\"excerpt\":\"我不知道当时为什么要造这个轮子！！！（一开始写得挺起劲，到最后想死的心都有了，好在似乎已经把第一版本给搞定了——反正MIT，过几天调试没问题我就Github） &nbsp; 插件简介： CSS前缀开发者最头疼的问题：前缀问题。虽然现在前缀问题在最新的浏览器下不是问题（火狐、Edge兼容无前缀后只有webkit和opera存在问题了）。但是总是有那么多人不愿意升级浏览器，于是，作为技术萌，我们只能帮主人们解决这些问题。 现在你只需要写一遍不加任何前缀的css，使用脚本就可以直接“加载”成有前缀的css脚本，并自动嵌在html网页内。 【这里不得不PS一下：这个插件之所以有所不同，是因为它不会生成其他文件，它只是在加载css的时候临时转换css，因此，你无须备份原始的css文件（这点绝对要比其他轮子好！！！）】\",\"text\":\"我不知道当时为什么要造这个轮子！！！（一开始写得挺起劲，到最后想死的心都有了，好在似乎已经把第一版本给搞定了——反正MIT，过几天调试没问题我就Github） &nbsp; 插件简介： CSS前缀开发者最头疼的问题：前缀问题。虽然现在前缀问题在最新的浏览器下不是问题（火狐、Edge兼容无前缀后只有webkit和opera存在问题了）。但是总是有那么多人不愿意升级浏览器，于是，作为技术萌，我们只能帮主人们解决这些问题。 现在你只需要写一遍不加任何前缀的css，使用脚本就可以直接“加载”成有前缀的css脚本，并自动嵌在html网页内。 【这里不得不PS一下：这个插件之所以有所不同，是因为它不会生成其他文件，它只是在加载css的时候临时转换css，因此，你无须备份原始的css文件（这点绝对要比其他轮子好！！！）】 插件名称：CSSSuperFitter.js （纯Javascript闭包，无需其他框架支持） 用法： 构造如下： var CssCF = new CSSCF({ name1:”style1”, name2:”style2”, …}, Transfer);其中 name 标识自定义名称（接下来加载css时需要用到） style表示css文件的路径（1.0版本暂不支持跨域） Transfer属性表示是否自动添加前缀：1(true)为添加 0(false)为不添加 不添加时，该插件仅仅有动态加载css的功能 例如： var CssCF = new CSSCF({ SingleAnimate:”./css/animate.css”, ExitingAnimate:”./css/exit.css”}, 1);这样，你就完成了函数的初始化。 使用如下： CssCF.init([names] or name);其中 name 标识自定义名称（就是上文中的name） 这里的name可以为一个数组：例如： CssCF.init([“SingleAnimate”,”ExitingAnimate”]);&nbsp; &nbsp; 也可以是一个字符串： CssCF.init(“SingleAnimate”);你想要加载那个CSS，你就指定它的名字即可。 &nbsp; &nbsp; 由于暂时没空做Demo，想要了解源码的就先至我的Debug页（请F12模式）吧 (或者，Github)\",\"categories\":[{\"name\":\"PHP酱\",\"slug\":\"PHP酱\",\"permalink\":\"https://nekoyu.cc/categories/PHP酱/\"},{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"PHP酱/我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/PHP酱/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"css\",\"slug\":\"css\",\"permalink\":\"https://nekoyu.cc/tags/css/\"},{\"name\":\"javascript\",\"slug\":\"javascript\",\"permalink\":\"https://nekoyu.cc/tags/javascript/\"},{\"name\":\"轮子\",\"slug\":\"轮子\",\"permalink\":\"https://nekoyu.cc/tags/轮子/\"}]},{\"title\":\"【杂记】一句话博客 - 新名字\",\"slug\":\"miao-cc\",\"date\":\"un66fin66\",\"updated\":\"un33fin33\",\"comments\":true,\"path\":\"articles/miao-cc/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/miao-cc/\",\"excerpt\":\"\",\"text\":\"从今天开始，我多了一个新名字https://喵.cc/ 喵喵喵 (^･ｪ･^) ～～～\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"},{\"name\":\"这里是宇宙\",\"slug\":\"我的玩具不可能那么可爱/这里是宇宙\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/这里是宇宙/\"}],\"tags\":[{\"name\":\"互联网\",\"slug\":\"互联网\",\"permalink\":\"https://nekoyu.cc/tags/互联网/\"},{\"name\":\"杂七杂八\",\"slug\":\"杂七杂八\",\"permalink\":\"https://nekoyu.cc/tags/杂七杂八/\"}]},{\"title\":\"【LinkerMusic v1.0】 私有歌曲云服务\",\"slug\":\"linkermusic-private-music-cloud-v1\",\"date\":\"un66fin66\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/linkermusic-private-music-cloud-v1/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/linkermusic-private-music-cloud-v1/\",\"excerpt\":\"重要提示！1地址由之前的https://喵.cc/迁移至https://nekoyu.cc/请手动更换URL。 虽然LinkerMusic早在15年12月时就已经写好，但是因为服务器压力的原因，只运行了一个月就暂停上传服务，仅保留链接服务。现在由于更换了一个比较稳定的服务器，经过调整之后，决定再次打开上传接口。 【上传地址】\",\"text\":\"重要提示！1地址由之前的https://喵.cc/迁移至https://nekoyu.cc/请手动更换URL。 虽然LinkerMusic早在15年12月时就已经写好，但是因为服务器压力的原因，只运行了一个月就暂停上传服务，仅保留链接服务。现在由于更换了一个比较稳定的服务器，经过调整之后，决定再次打开上传接口。 【上传地址】 &nbsp; 首先先介绍一下它【包括一些新特性】1、采用新浪云服务（阿里是个坑，别问我为什么） 2、支持多首歌曲随机播放（用法参见使用流程） 3、播放器宽度自适应（请直接调节iframe宽度即可） 4、播放器采用APlayer（MIT）感谢网红DIYGod 喵~ &nbsp; 为什么要使用她？ 0、（可爱） 1、给一些网络不稳定的站长（基佬）们提供一个稳定的播放服务（似乎还能省不少流量喵） 2、缓解服务器压力 &nbsp; 使用流程： 1、允许用户上传MP3格式的歌曲，比特率随意。（建议上传标准ID3下的MP3，否则在读取数据时会出现问题） 2、上传MP3至服务器之后，用户可以自定义歌曲标题、歌手、专辑（也就是说，如果这不是商业出版的MP3，仅仅是自己录制的MP3，也可以在这里手动加上ID3信息）【注意：Cover专辑图片暂不支持更换！】 3、确认信息之后，点击提交，你就可以获得一个iframe标签，把它插入在任意网页中即可“食用”。 4、如果想随机播放多首歌曲，你可以在http网址的id后紧接着添加新的id，并在id之间用“/”隔开，案例如下： https://nekoyu.cc/LinkerMusic/Linker.php?id=77409139/72997377&nbsp; （什么？我曾经说过要美化界面？你一定是听错了吧 0.0。美化这个坑我还是暂时搁着吧） &nbsp;\",\"categories\":[{\"name\":\"PHP酱\",\"slug\":\"PHP酱\",\"permalink\":\"https://nekoyu.cc/categories/PHP酱/\"},{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"PHP酱/我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/PHP酱/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"Music\",\"slug\":\"Music\",\"permalink\":\"https://nekoyu.cc/tags/Music/\"},{\"name\":\"PHP\",\"slug\":\"PHP\",\"permalink\":\"https://nekoyu.cc/tags/PHP/\"},{\"name\":\"LinkerMusic\",\"slug\":\"LinkerMusic\",\"permalink\":\"https://nekoyu.cc/tags/LinkerMusic/\"}]},{\"title\":\"【周记】在VPS上搭建Nginx并为Google做反向代理\",\"slug\":\"proxy-google\",\"date\":\"un11fin11\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/proxy-google/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/proxy-google/\",\"excerpt\":\"嘛嘛，这个礼拜难得不（cheng）务（ji）正（tou）业（lan）一回，既然没有什么新想法，那就搬运一些东西过来吧。&nbsp; 以前有人问过我这样的问题：“嘿，小白？为什么你要买VPS呢？用Hostker的虚拟主机不是很好吗（好好好！我承认她没有说Hostker，www我是在打广告，她的原话是虚拟主机）” 我想都没想就这么回答：“可以跑nodejs” “那你可以直接托管在coding上啊？（！！我不是在打广告！这就是原话！）” “哦，VPS还可以翻墙。。” “……”\",\"text\":\"嘛嘛，这个礼拜难得不（cheng）务（ji）正（tou）业（lan）一回，既然没有什么新想法，那就搬运一些东西过来吧。&nbsp; 以前有人问过我这样的问题：“嘿，小白？为什么你要买VPS呢？用Hostker的虚拟主机不是很好吗（好好好！我承认她没有说Hostker，www我是在打广告，她的原话是虚拟主机）” 我想都没想就这么回答：“可以跑nodejs” “那你可以直接托管在coding上啊？（！！我不是在打广告！这就是原话！）” “哦，VPS还可以翻墙。。” “……” &nbsp; 现在看来，这话一点都没有错。VPS对于我而言比较有实验性质。一些中规中矩的东西还是放在了虚拟主机上（毕竟虚拟主机不用自己维护）【正如这个部落格~~ 还有LinkerMusic服务之类的】 SS自我购买VPS第一天就开始运作，现在已经有1个月了，SS有她的优点，比如全局代理更换IP、256bit加密又比PPTP安全不少。但是，还是有一点点局限性。那就是，使用者都是我的基友（姬友→。→？）。但是，如果我想要代理某些固定内容，并开放给所有人使用，（类似于CDN之类的具有分发效果的代理）SS就不是一个很好的选择【喂喂！】 所以：正题来了：用VPS做一个反向代理（这里以Google为例【但是Google需要插件，而本地反代就不需要，这个之后再说】）。 我选择的工具是： Node.js Node是我比较喜欢的妹子（滚）服务器搭建方式。之前也偷喵了一眼Github，发现有一个名为“Redbird”的项目，相当厉害。它使我们不用费力地使用http-proxy（好啦好啦！hp也是非常方便的啦！），只要两句话（如果做的极端一点就是一句话~~）代码如下： var server = require(‘redbird’)({port:80}); server.register(“Your-Domain-Name”,”Destination(:port)”);是不是超简洁？ 当然，之前npm install redbird (-g)就不用我教了吧！ 但是，这样有一个问题——反代Google会有404错误（本地代理完全没问题）（虽然Google的icon能加载），我并不是这方面的专家，所以我也不清楚原因（改天找橙子问问？【打】） 所以，我就用了被人们夸得神乎其神的代理之王Nginx。 并且使用到了一个开源插件： 地址：点我 只要跟着里面的教程搭建就行了。这里我就不Copy Paste了，最多扔两张截图：截图如下： &nbsp; &nbsp; 最后附上我的一个测试站：停止服务 转移至 Project Slink.最后附上我的一个测试站：停止服务 转移至 Project Slink. 最后祝各位五一快乐！\",\"categories\":[{\"name\":\"nodejs大坑好\",\"slug\":\"nodejs大坑好\",\"permalink\":\"https://nekoyu.cc/categories/nodejs大坑好/\"},{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"nodejs大坑好/我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/nodejs大坑好/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"VPS\",\"slug\":\"VPS\",\"permalink\":\"https://nekoyu.cc/tags/VPS/\"},{\"name\":\"Nginx\",\"slug\":\"Nginx\",\"permalink\":\"https://nekoyu.cc/tags/Nginx/\"}]},{\"title\":\"【 MyDreamPalace 】Wordpress 欢迎页插件\",\"slug\":\"plugin-mydreampalace\",\"date\":\"un66fin66\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/plugin-mydreampalace/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/plugin-mydreampalace/\",\"excerpt\":\"title: 【 MyDreamPalace 】Wordpress 欢迎页插件tags: MyDreamPalace 插件 碎碎念id: 57categories: 我的玩具不可能那么可爱~date: 2016-04-30 13:04:56 嘛嘛，玩了那么久Wordpress怎么能只是满足于发发博文呢。 于是我总想为wordpress做些什么…… 主题？看看自己的美工能力 哭死在阳台上 于是就只能在插件上动脑筋了（其实，真正的原因是自己懒得做主题 &nbsp; 进过几天的辛（tou）勤（gong）努（jian）力（liao）终于有了现在的 插件版欢迎页： 想知道效果的话，进入我的主页的时候就能看到了。\",\"text\":\"title: 【 MyDreamPalace 】Wordpress 欢迎页插件tags: MyDreamPalace 插件 碎碎念id: 57categories: 我的玩具不可能那么可爱~date: 2016-04-30 13:04:56 嘛嘛，玩了那么久Wordpress怎么能只是满足于发发博文呢。 于是我总想为wordpress做些什么…… 主题？看看自己的美工能力 哭死在阳台上 于是就只能在插件上动脑筋了（其实，真正的原因是自己懒得做主题 &nbsp; 进过几天的辛（tou）勤（gong）努（jian）力（liao）终于有了现在的 插件版欢迎页： 想知道效果的话，进入我的主页的时候就能看到了。 至于发布的问题……至少让我把后台写完（偷几天懒-//打一顿(((o(ﾟ▽ﾟ)o))) 后台也写完了0.0 FF的兼容性让我再一次感受到了CSS水之深 wwwwwChrome下截图一张： &nbsp; 已兼容浏览器： Chrome IE9 + Edge Safari UC Web Kernel QQ Web Kernel Opera Firefox\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"MyDreamPalace\",\"slug\":\"MyDreamPalace\",\"permalink\":\"https://nekoyu.cc/tags/MyDreamPalace/\"},{\"name\":\"插件\",\"slug\":\"插件\",\"permalink\":\"https://nekoyu.cc/tags/插件/\"}]},{\"title\":\"【PHP Socket.IO】构想实现方式 ～ 呼呼呼 最近搞项目没办法实现了\",\"slug\":\"php-socket\",\"date\":\"un22fin22\",\"updated\":\"un00fin00\",\"comments\":true,\"path\":\"articles/php-socket/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/php-socket/\",\"excerpt\":\"最近的项目 My1ink 中，除了首次加载页面用一般 HTTP GET 刷新页面，其他操作全是用 Socket.IO 实现的。于是，(^･ｪ･^)就想，能否在PHP中，自己动手实现一个类似于Node.js中Socket.io库的前后端通信的库。 碎碎念…念….念… 大概想到这些：&nbsp; 1、客户端通过SetTimeInterval方式，每过0.1s，用跨域$.ajax访问php服务页面。&nbsp; 2、服务器中，对于每一个特定用户，注册一个队列（队列空间可以用Mysql或者Memcache实现，嗯嗯Memcache效率更高）。每次服务器发送指令时，全都把特定指令压到队列尾部，并由客户端在访问周期（1中是每0.1s通信检查一次）中读取队列前部，一次一条（别告诉我你的操作速度能高过处理周期QAQ）。\",\"text\":\"最近的项目 My1ink 中，除了首次加载页面用一般 HTTP GET 刷新页面，其他操作全是用 Socket.IO 实现的。于是，(^･ｪ･^)就想，能否在PHP中，自己动手实现一个类似于Node.js中Socket.io库的前后端通信的库。 碎碎念…念….念… 大概想到这些：&nbsp; 1、客户端通过SetTimeInterval方式，每过0.1s，用跨域$.ajax访问php服务页面。&nbsp; 2、服务器中，对于每一个特定用户，注册一个队列（队列空间可以用Mysql或者Memcache实现，嗯嗯Memcache效率更高）。每次服务器发送指令时，全都把特定指令压到队列尾部，并由客户端在访问周期（1中是每0.1s通信检查一次）中读取队列前部，一次一条（别告诉我你的操作速度能高过处理周期QAQ）。 具体实现部分：&nbsp; 用户：&nbsp; 1. 生成随机码，并以随机码向服务器ajax，请求连接。&nbsp; 2. 服务器检查随机码唯一性，保存，生成新的队列，对应的队列名即为这串随机码。（使客户端和随机码一一对应）（这时候这个随机码就固定下来，成为客户的昵称）&nbsp; 3. php 检查用户是否写了 function init() （可以用call方法检验。）若用户写了init() 则调用。&nbsp; 4. 客户端的指令被服务器以get方式接收后，用 call_user_func( function_name , args[] ) 调用（同样用call 检查是否“继承”了该函数（伪继承））。&nbsp; 5. 在一个周期后，如果客户端检查发现有服务器指令，则获取 function_name 和 args(object) 并由重载函数执行 javascript （呀呀呀，javascript 的重载就是方便）&nbsp; 6. 完 什么？你说不能有php主动提出通信？为何不问cron娘⊙_⊙～~、 如果有好基友萌有空帮我实现，一定要让我知道一下哈！！！\",\"categories\":[{\"name\":\"PHP酱\",\"slug\":\"PHP酱\",\"permalink\":\"https://nekoyu.cc/categories/PHP酱/\"}],\"tags\":[{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"socketio\",\"slug\":\"socketio\",\"permalink\":\"https://nekoyu.cc/tags/socketio/\"},{\"name\":\"实验室\",\"slug\":\"实验室\",\"permalink\":\"https://nekoyu.cc/tags/实验室/\"}]},{\"title\":\"About Me ~~\",\"slug\":\"about\",\"date\":\"un00fin00\",\"updated\":\"un22fin22\",\"comments\":true,\"path\":\"articles/about/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/about/\",\"excerpt\":\"Welcome To Yuuno Hibiki - (Jerry Yu) ‘s Space. &nbsp; Content 本喵，在2016年再一次入驻Wordpress大坑(事实证明，很快我又退坑了，现在是hexo - 于 2016.06)。\",\"text\":\"Welcome To Yuuno Hibiki - (Jerry Yu) ‘s Space. &nbsp; Content 本喵，在2016年再一次入驻Wordpress大坑(事实证明，很快我又退坑了，现在是hexo - 于 2016.06)。 说实话，对于还有40天就要高考【可爱的江苏高考】的我来说，这也太有勇气（lang）了。 至于再入坑一说，本喵的就不加解释了，直接看接下来的“互联网记事”吧！ 2014 - 09 : 试用C9【Cloud9】（那时候C9还没有改版，还没有使用万恶的谷歌验证码，还没有被GFW桑墙）并正式从Native宅转入互联网编程猿。 2014 - 10 : 购买阿里云ECS 开始进击的PHP【PHP大法！大法！】，搭建第一个WordPress。 2015 - 01 : 开发S7SGame【Cooperated With Etasry】，发布Android人工智能版本【现已停止维护】（不是说还有Unity版本吗！Unity！Unity！–打–） 2015 - 07: 从这个暑假开始接触 html5桑 和 javascript酱。 2015 - 08 : 历经两月开发Q.FM【Html版本 + Android 本地Html化】【Android版本因服务器原因现已停止维护】【Html5版本：https://nekoyu.cc/fm】【什么？说我盗用黄易API？那叫研究！喵星人的研究能叫偷盗吗！？】 2015 - 09 : Hostker娘 萌萌哒！！ 2015 - 11 : 发布LinkerMusic 贡献200软妹币给各位痴汉们提供新浪云存储服务。【感谢你们没有刷我流量】【现还在维护，歌曲上传接口已关闭，别问我要接口！！！小窝撑不下啦！】 2015 - 12 : 强行入坑Node.js 和 Go 关闭WordPress站【药丸啊！药丸！】【反正之前也没有多少人气 哒哒哒】 2015 - 12 : 被异次元的自己拽入Vultr女仆的怀抱。【VPS大法好！】 2015 - 12 : 开坑 My1ink 一直到现在都没有填上，刚刚写好后端 呜呜呜~~~。【自己开的坑死都要填完】 2016 - 04 : 重返WordPress【不过似乎是官窝呢！】什么，为什么重返WordPress？我说这是因为没软妹币雇女仆你会信吗。。呜呜呜~~~// 不过！之前的坑还是得填的！ 2016 - 06 : Hexo喵喵喵 2016 - 09 : yBalance， 基于Python的服务器文件分发及流量控制系统（部分开源在Github）坑还没填平 2016 - 10 : HibiBall ??? Hibiki球 ??? 不 ！ 只不过是一个Online联机版贪吃蛇 TAT （http://open.nekoyu.cc:88）喵不备案，水管又小，就别折磨喵的服务器了TAT 2016 - 10 : JenBlog， 基于Nodejs和Markdown的博客系统（但是由于手残，不知道界面怎么设计，目前还处于只有算法没有美观的状态 2016 - 10 : JenBlog -&gt; NekoBlog， 基于Nodejs和Markdown的博客系统，该用Html5Up作为主题。代码已开源。或到这里。 2016 - 10 : 喵.cc -&gt; nyau.us，喵短链升级，支持混合URL，并改编为PHP版本 2016 - 11 : QPlayer！！（最美【打】的跨平台音乐播放器【配合各大音乐供应商的歌单食用 新站搭建与 2016/06/15，由 Yuuno Hibiki 和 Hostker 共同维护。 于 2017/01/03 修改。\",\"categories\":[{\"name\":\"这里是宇宙\",\"slug\":\"这里是宇宙\",\"permalink\":\"https://nekoyu.cc/categories/这里是宇宙/\"}],\"tags\":[{\"name\":\"关于我\",\"slug\":\"关于我\",\"permalink\":\"https://nekoyu.cc/tags/关于我/\"},{\"name\":\"Hibiki\",\"slug\":\"Hibiki\",\"permalink\":\"https://nekoyu.cc/tags/Hibiki/\"}]},{\"title\":\"Links\",\"slug\":\"links\",\"date\":\"un44fin44\",\"updated\":\"un33fin33\",\"comments\":true,\"path\":\"articles/links/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/links/\",\"excerpt\":\"ww 因为换了一个部落格主题，所以就没有友链插件啦以后友链都会专门放在这里\",\"text\":\"ww 因为换了一个部落格主题，所以就没有友链插件啦以后友链都会专门放在这里 基友萌萌的小新喵橙橙~橙汁喵呆萌滴雅音宮羽Néil-&gt;千杉 技术0xBBCqwe7002学生菊苣雲水遙Dimpurr设计菊苣特殊嗜好的傲娇Cai樱喵~蔓舞寻樱云羽桑~CeeYuxuan Lin 同学黑科技马云LER 以上\",\"categories\":[{\"name\":\"这里是宇宙\",\"slug\":\"这里是宇宙\",\"permalink\":\"https://nekoyu.cc/categories/这里是宇宙/\"}],\"tags\":[{\"name\":\"友链\",\"slug\":\"友链\",\"permalink\":\"https://nekoyu.cc/tags/友链/\"}]},{\"title\":\"【QPlayer】How To Add Music - Wiki\",\"slug\":\"addlist-en\",\"date\":\"un33fin33\",\"updated\":\"un55fin55\",\"comments\":true,\"path\":\"articles/addlist-en/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/addlist-en/\",\"excerpt\":\"About QPlayerQPlayer is a portable Music FM drived by Node.js And Electron. (Musics From NetEase.) The Reason WHY I made it is simply for the troublesome when using other music player. (It took me so much time to figure out bunch of settings when starting up LOL.) Download The Latest Version: QPlayer For Details, Please GO TO: https://nekoyu.cc/articles/qplayer-manual/#UserManual\",\"text\":\"About QPlayerQPlayer is a portable Music FM drived by Node.js And Electron. (Musics From NetEase.) The Reason WHY I made it is simply for the troublesome when using other music player. (It took me so much time to figure out bunch of settings when starting up LOL.) Download The Latest Version: QPlayer For Details, Please GO TO: https://nekoyu.cc/articles/qplayer-manual/#UserManual Enter the Adding PageFirst, we should go to the Adding panel. For new user，QPlayer will show the Adding Panel it, For old user - Enter by Browser - Click Me 【Since QPlayer uses the same server as TicEase does, so don’t worry why it shows the page of TicEase】 Or You can Enter the page inside the Software. Clicking Anywhere of the Cover that brings you to the control panel. After that, click the green button on the right-top. Finally, click the ShortID button. Different from the Brower version, you don’t need to enter your ShortID if you launch the Adding page inside the software. What’s more, by modifying the ShortID, you can listen to other’s list. How to add Song / Lists The Pics in Manual are in Chinese, but do not worry, in the player, it should be in English. First, Click “Add Item (xxxx)” xxxx stands for your ShortID From Version 1.5.*, you do not have to get ID for a song or album, just URL. This is more convenient especially when you want to add songs from different music providers. How to get a URL? Take NetEase for example.Click Me Enter your own mainpage(Or That of Others) here： Select a List（ Here I use NHibiki喜欢的音乐 for example ～ Look at the Location：You would see http://music.163.com/#/playlist?id=91881742 , This url is exactly what you want. The Same, if you want to add song 前前前世 (movie ver.) when enter the song page, you can get location： http://music.163.com/#/song?id=426881487 and this is what you need. Then, we’ve got one list and one song. By the way, If you want to delete one option, please feel free to click it. If you have any question, please contact me. Anything ElseYou can set your ShortID to IFM, so that you can listen to songs from everyone. Thanks for reading.\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"},{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"node\",\"slug\":\"node\",\"permalink\":\"https://nekoyu.cc/tags/node/\"}]},{\"title\":\"【QPlayer】如何添加音乐 - Wiki\",\"slug\":\"addlist\",\"date\":\"un33fin33\",\"updated\":\"un55fin55\",\"comments\":true,\"path\":\"articles/addlist/\",\"link\":\"\",\"permalink\":\"https://nekoyu.cc/articles/addlist/\",\"excerpt\":\"For English Version. 关于QPlayerQPlayer 是用 Node.js + Electron 写的一个便携式音乐电台 写的初衷主要是因为窝怕麻烦（音乐播放器什么的要点好多好多下才能做成这样的播放样式（特别麻烦 关于QPlayer的细节，这里暂时不多说，毕竟这篇文章的主题是如何添加音乐 ～ 你可以去：https://nekoyu.cc/articles/qplayer-manual 有详细的介绍～\",\"text\":\"For English Version. 关于QPlayerQPlayer 是用 Node.js + Electron 写的一个便携式音乐电台 写的初衷主要是因为窝怕麻烦（音乐播放器什么的要点好多好多下才能做成这样的播放样式（特别麻烦 关于QPlayer的细节，这里暂时不多说，毕竟这篇文章的主题是如何添加音乐 ～ 你可以去：https://nekoyu.cc/articles/qplayer-manual 有详细的介绍～ 进入设置首先，用户ID根据MAC地址处理判定，所以即便是重装系统也能保留唯一ID啦！） 然后，我们先说一下如何进入设置页面 ～ 对于新用户，QPlayer将自动弹出设置页面，对于老用户，可以这样进入设置页面 - 点击 URL 从浏览器进入 - 点我 【因为电脑端的QPlayer和Tic/Android版的Q.FM使用统一终端服务器，所以就不要感觉意外为什么进入的是TicEase的界面啦～】 或者，你可以在软件内进入 - 方式如下： 在 Cover 页面随意点击可以进入播放器页面：（返回也是随意点击空白处就好啦） 之后，点击右上角的绿色按钮进入设置页面：（返回还是一样哦！再点一次按钮就好） 最后，点击ShortID就可以进入啦！ 与网页端不同的是，软件是自动登录的，你不需要输入你的ShortID，如果你是浏览器登录，那么请记住你的ShortID （因为这不涉及私人信息，所以没有密码验证，孩纸们不要偷偷篡改别人的歌单哦！） 关于如何添加音乐 Update From V1.5首先先点击 “Add Item (xxxx)” xxxx代表你的ShortID 从V1.5开始，为了匹配各大音乐网站，ID输入变为URL（网址）输入，只要你把URL（网址）拷贝进来就好啦～ 那么，怎么获取URL呢？我们以网易为例 点我 进入自己（或者其他人）的主页： 随意点击一个歌单（ 这里以 NHibiki喜欢的音乐为例 ～ 现在看地址栏：可以看到 http://music.163.com/#/playlist?id=91881742 那么，直接将它拷贝到URL框就好啦 同理，如果是歌曲，例如 前前前世 (movie ver.) 打开歌曲页面后 可以看到地址栏： http://music.163.com/#/song?id=426881487 拷贝进去可以直接添加歌曲 这样，我们就添加了两项啦～ 另外，如果要删除，只需要点击一下，确定，就好了～ 如果有什么问题还需要我的帮助，可以直接在下面留言（ 如果因为Disqus被墙而无法留言，请通过博客中的联系方式联系我 ～ 更多玩法如果我想在其他的电脑上也使用这些设置怎么办呢？ 很简单 首先进入设置界面 在 ShortID 右侧，把ID改成自己的ID就好啦（别忘了敲回车哦！ 彩蛋首先，感谢您看到了这里 ～ 那么我就把小彩蛋告诉你吧 ～ 如果你把ShortID改为空，那么就可以进入 Global FM 哦～ 所有人的歌都会在这里出现 （不过请放心，下次启动，还会还原成修改之前的 ShortID 设置 ～ 以上 ～\",\"categories\":[{\"name\":\"我的玩具不可能那么可爱~\",\"slug\":\"我的玩具不可能那么可爱\",\"permalink\":\"https://nekoyu.cc/categories/我的玩具不可能那么可爱/\"}],\"tags\":[{\"name\":\"NHibiki\",\"slug\":\"NHibiki\",\"permalink\":\"https://nekoyu.cc/tags/NHibiki/\"},{\"name\":\"碎碎念\",\"slug\":\"碎碎念\",\"permalink\":\"https://nekoyu.cc/tags/碎碎念/\"},{\"name\":\"node\",\"slug\":\"node\",\"permalink\":\"https://nekoyu.cc/tags/node/\"}]}]}"}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2017-08-22 19:56:10","updated":"2017-08-22 20:04:31","comments":true,"path":"2017/08/22/hello-world/","link":"","permalink":"http://yoursite.com/2017/08/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment List 1 2 3 &lt;a href=&quot;#test&quot;&gt;Test&lt;/a&gt;","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very <code>first post</code>. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<pre><code class=\"html\">  &lt;a href=&quot;#test&quot;&gt;Test&lt;/a&gt;\n</code></pre>\n","categories":[{"name":"Cate1","slug":"Cate1","permalink":"http://yoursite.com/categories/Cate1/"}],"tags":[{"name":"Tag1","slug":"Tag1","permalink":"http://yoursite.com/tags/Tag1/"},{"name":"Tag2","slug":"Tag2","permalink":"http://yoursite.com/tags/Tag2/"}]}]}